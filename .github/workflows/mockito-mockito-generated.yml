name: mockito/mockito
on:
  workflow_dispatch:
    inputs:
      repoName:
        description: Name of the repo
        required: false
      patch:
        description: Base64 encoded patch content
        required: false
      command:
        description: Command to run
        required: false
      ref:
        description: The repo branch, tag, or commit SHA to checkout
        required: false
permissions:
  contents: read
jobs:
  build:
    runs-on: ubuntu-latest
    if: true
    strategy:
      matrix:
        java:
        - 11
        - 17
        - 21
        entry:
        - mock-maker: mock-maker-default
          member-accessor: member-accessor-default
        - mock-maker: mock-maker-inline
          member-accessor: member-accessor-module
        - mock-maker: mock-maker-subclass
          member-accessor: member-accessor-module
        - mock-maker: mock-maker-subclass
          member-accessor: member-accessor-reflection
        - mock-maker: mock-maker-inline
          member-accessor: member-accessor-reflection
    steps:
    - name: 1. Check out code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        repository: ${{ github.event.inputs.repoName }}
        ref: ${{ github.event.inputs.ref }}
    - name: 2. Set up Java for running Gradle build
      uses: actions/setup-java@v4
      with:
        distribution: zulu
        java-version: 17
        cache: gradle
    - name: 3. Validate Gradle wrapper
      if: matrix.java == 11 && matrix.entry.mock-maker == 'mock-maker-default'
      uses: gradle/wrapper-validation-action@v3.4.2
    - name: 4. Build and check reproducibility of artifacts (single job only)
      if: matrix.java == 11 && matrix.entry.mock-maker == 'mock-maker-default'
      run: ./check_reproducibility.sh
    - name: 5. Spotless check (single job only). Run './gradlew spotlessApply' locally if this job fails.
      if: matrix.java == 11 && matrix.entry.mock-maker == 'mock-maker-default'
      run: |
        ./gradlew spotlessCheck --stacktrace --scan
    - name: 6. Build on Java ${{ matrix.java }} with ${{ matrix.entry.mock-maker }} and ${{ matrix.entry.member-accessor }}
      run: |
        ./gradlew -Pmockito.test.java=${{ matrix.java }} build idea --stacktrace --scan
      env:
        MOCK_MAKER: ${{ matrix.entry.mock-maker }}
        MEMBER_ACCESSOR: ${{ matrix.entry.member-accessor }}
    - name: 7. Generate coverage report
      run: |
        ./gradlew -Pmockito.test.java=${{ matrix.java }} coverageReport --stacktrace --scan
    - name: 8. Upload coverage report
      uses: codecov/codecov-action@v4
      env:
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
      with:
        files: build/reports/jacoco/mockitoCoverage/mockitoCoverage.xml
        fail_ci_if_error: true
  android:
    runs-on: ubuntu-latest
    if: true
    timeout-minutes: 30
    strategy:
      matrix:
        android-api:
        - 26
        - 33
    steps:
    - name: 1. Check out code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        repository: ${{ github.event.inputs.repoName }}
        ref: ${{ github.event.inputs.ref }}
    - name: 2. Set up Java for running Gradle build
      uses: actions/setup-java@v4
      with:
        distribution: zulu
        java-version: 17
        cache: gradle
    - name: 3. Enable KVM.
      run: |
        echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules

        sudo udevadm control --reload-rules

        sudo udevadm trigger --name-match=kvm
    - name: Apply patch
      shell: bash
      run: |

                if [ -n "${{ github.event.inputs.patch }}" ]; then
                   echo "Patch input provided. Applying patch..."
                   echo "${{ github.event.inputs.patch }}" | base64 --decode | sed 's/\r$//'  > patch.diff
                   echo "Decoded patch content:"
                   cat patch.diff 
                   echo "Apply the patch:"
                   git apply patch.diff || {
                     echo "Failed to apply patch"
                     exit 1
                   }
                 else
                   echo "No patch input provided. Skipping patch application."
                 fi
                echo "Print git diff on local repo"
                git diff
    - name: Run custom command
      shell: bash
      run: |
         
                if [ -n "${{ github.event.inputs.command }}" ]; then
                   echo "Start running custom command"
                   echo "${{ github.event.inputs.command }}"
                   output=$(echo "${{ github.event.inputs.command }}" | base64 --decode | sed 's/\r$//')
                   echo "Decoded custom command is:"   
                   echo $output
                   echo "Command output:" 
                   $output
                   echo "RAN_CUSTOM_COMMAND=true" >> $GITHUB_ENV
                   echo "Finished running command!"
                fi
    - name: Exit if custom command was run
      if: env.RAN_CUSTOM_COMMAND == 'true'
      shell: bash
      run: |

                echo "Exiting job after custom command run"
                exit 1
    - name: 4. Run Android tests on Android API level ${{ matrix.android-api }} (ces) (ces)
      uses: reactivecircus/android-emulator-runner@v2
      with:
        arch: x86_64
        api-level: ${{ matrix.android-api }}
        emulator-options: >
          -no-window -gpu swiftshader_indirect -no-snapshot -noaudio -no-boot-anim -camera-back none -camera-front none
        script: >
          # Capture logcat output from "Launch Emulator" to a file.

          adb logcat -d > emulator-startup.log

          # Shorten the logcat output, by truncating at this point, the relevant part is yet to come.

          # Best effort, could fail with "failed to clear the 'main' log",

          # because something is locking logcat, so try a few times, and ignore errors each time.

          adb logcat --clear || true

          adb logcat --clear || true

          adb logcat --clear || true

          # Capture full logcat output to a file.

          adb logcat > emulator.log & echo $! > logcat_file.pid

          # Output instrumentation test logs to the GitHub Actions output.

          adb logcat "*:S MonitoringInstr:V AndroidJUnitRunner:V TestRequestBuilder:V TestExecutor:V TestRunner:V" --format=color & echo $! > logcat_console.pid


          echo 0 > gradle.exit # Set a default exit code.

          # Run the actual tests (suppress build failures by saving the exit code).

          ./gradlew :androidTest:connectedCheck --no-daemon --no-build-cache || echo $? > gradle.exit


          # Stop capturing logcat output.

          kill $(cat logcat_file.pid)    || echo "::warning file=.github/workflows/ci.yml::Logcat process $(cat logcat_file.pid) didn't exist."

          kill $(cat logcat_console.pid) || echo "::warning file=.github/workflows/ci.yml::Logcat process $(cat logcat_console.pid) didn't exist."

          # Make sure the step fails if the tests failed.

          exit $(cat gradle.exit)
    - name: 5. Upload artifact "androidTest-results-${{ matrix.android-api }}" (ces)
      if: success() || failure()
      uses: actions/upload-artifact@v4
      with:
        name: androidTest-results-${{ matrix.android-api }}
        path: >
          ${{ github.workspace }}/subprojects/androidTest/build/reports/androidTests/connected/**

          ${{ github.workspace }}/emulator.log

          ${{ github.workspace }}/emulator-startup.log
    - name: 6. Upload coverage report
      uses: codecov/codecov-action@v4
      env:
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
      with:
        files: subprojects/androidTest/build/reports/coverage/androidTest/debug/connected/report.xml
        fail_ci_if_error: true
  release:
    permissions:
      contents: write
    runs-on: ubuntu-latest
    needs:
    - build
    if: true
    steps:
    - name: 1. Check out code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        repository: ${{ github.event.inputs.repoName }}
        ref: ${{ github.event.inputs.ref }}
    - name: 2. Set up Java for running Gradle build
      uses: actions/setup-java@v4
      with:
        distribution: zulu
        java-version: 21
        cache: gradle
    - name: 3. Build and release
      run: |
        ./gradlew githubRelease publishToSonatype closeAndReleaseStagingRepository releaseSummary --stacktrace
      env:
        GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
        NEXUS_TOKEN_USER: ${{secrets.NEXUS_TOKEN_USER}}
        NEXUS_TOKEN_PWD: ${{secrets.NEXUS_TOKEN_PWD}}
        PGP_KEY: ${{secrets.PGP_KEY}}
        PGP_PWD: ${{secrets.PGP_PWD}}
