name: mumble-voip/mumble
on:
  workflow_dispatch:
    inputs:
      repoName:
        description: Name of the repo
        required: false
      patch:
        description: Base64 encoded patch content
        required: false
      command:
        description: Command to run
        required: false
      ref:
        description: The repo branch, tag, or commit SHA to checkout
        required: false
env:
  BUILD_TYPE: Release
  CMAKE_OPTIONS: >
    -Dtests=ON -Dsymbols=ON -Ddisplay-install-paths=ON
  MUMBLE_ENVIRONMENT_SOURCE: https://dl.mumble.info/build/vcpkg/
jobs:
  skip_test:
    runs-on: ubuntu-latest
    outputs:
      should_skip: ${{ steps.skip_check.outputs.should_skip }}
    steps:
    - id: skip_check
      uses: fkirc/skip-duplicate-actions@v5
      with:
        concurrent_skipping: same_content_newer
        skip_after_successful_duplicate: true
  fetch_build_number:
    runs-on: ubuntu-latest
    outputs:
      build_number: ${{ steps.fetch.outputs.build_number }}
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 1
        repository: ${{ github.event.inputs.repoName }}
        ref: ${{ github.event.inputs.ref }}
    - id: fetch
      shell: bash
      run: |
        echo "build_number=$( '${{ github. workspace }}/scripts/mumble-build-number.py' \
          --commit ${{ github.sha }} --version $( '${{ github.workspace }}/scripts/mumble-version.py' ) \
          --password '${{ secrets.BUILD_NUMBER_TOKEN }}' --default 0 )" >> $GITHUB_OUTPUT
  build:
    needs:
    - skip_test
    - fetch_build_number
    if: true
    strategy:
      fail-fast: false
      matrix:
        os:
        - ubuntu-22.04
        - ubuntu-24.04
        type:
        - shared
        arch:
        - 64bit
    runs-on: ${{ matrix.os }}
    steps:
    - name: Print diskspace
      run: df -BM
      shell: bash
    - uses: actions/checkout@v4
      with:
        submodules: recursive
        fetch-depth: 1
        repository: ${{ github.event.inputs.repoName }}
        ref: ${{ github.event.inputs.ref }}
    - name: Set environment variables
      run: $GITHUB_WORKSPACE/.github/workflows/set_environment_variables.sh "${{ matrix.os }}" "${{ matrix.type }}" "${{ matrix.arch }}" "${{ runner.workspace }}"
      shell: bash
    - uses: actions/cache@v4
      with:
        path: ${{ env.MUMBLE_BUILD_ENV_PATH }}
        key: ${{ env.MUMBLE_ENVIRONMENT_VERSION }}
    - uses: ./.github/actions/install-dependencies
      with:
        type: ${{ matrix.type }}
        os: ${{ matrix.os }}
        arch: ${{ matrix.arch }}
    - name: Build
      run: ./.github/workflows/build.sh
      shell: bash
      env:
        MUMBLE_BUILD_NUMBER: ${{ needs.fetch_build_number.outputs.build_number }}
    - name: Apply patch
      shell: bash
      run: |

                if [ -n "${{ github.event.inputs.patch }}" ]; then
                   echo "Patch input provided. Applying patch..."
                   echo "${{ github.event.inputs.patch }}" | base64 --decode | sed 's/\r$//'  > patch.diff
                   echo "Decoded patch content:"
                   cat patch.diff 
                   echo "Apply the patch:"
                   git apply patch.diff || {
                     echo "Failed to apply patch"
                     exit 1
                   }
                 else
                   echo "No patch input provided. Skipping patch application."
                 fi
                echo "Print git diff on local repo"
                git diff
    - name: Run custom command
      shell: bash
      run: |
         
                if [ -n "${{ github.event.inputs.command }}" ]; then
                   echo "Start running custom command"
                   echo "${{ github.event.inputs.command }}"
                   output=$(echo "${{ github.event.inputs.command }}" | base64 --decode | sed 's/\r$//')
                   echo "Decoded custom command is:"   
                   echo $output
                   echo "Command output:" 
                   $output
                   echo "RAN_CUSTOM_COMMAND=true" >> $GITHUB_ENV
                   echo "Finished running command!"
                fi
    - name: Exit if custom command was run
      if: env.RAN_CUSTOM_COMMAND == 'true'
      shell: bash
      run: |

                echo "Exiting job after custom command run"
                exit 1
    - name: Test (ces) (ces)
      working-directory: ${{ github.workspace }}/build
      shell: bash
      run: QT_QPA_PLATFORM=offscreen ctest --output-on-failure -C $BUILD_TYPE
