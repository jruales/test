name: qt/qtbase
on:
  workflow_dispatch:
    inputs:
      repoName:
        description: Name of the repo
        required: false
      patch:
        description: Base64 encoded patch content
        required: false
      command:
        description: Command to run
        required: false
      ref:
        description: The repo branch, tag, or commit SHA to checkout
        required: false
env:
  BRANCH: dev
  BRANCH_REF: refs/heads/dev
defaults:
  run:
    shell: bash
jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        include:
        - name: ubuntu-20.04
          os: ubuntu-20.04
          deps: libgl-dev libglu-dev 'libxcb*-dev' libx11-xcb-dev libxkbcommon-x11-dev libpcre2-dev libz-dev libfreetype6-dev libpng-dev libjpeg-dev libsqlite3-dev libharfbuzz-dev libb2-dev libdouble-conversion-dev libmd4c-dev
          tools: ninja-build ccache
          install_cmd: sudo apt-get -y install
          configure_flags: -xcb -system-sqlite -system-pcre -system-zlib -system-freetype -system-libpng -system-libjpeg -system-harfbuzz -system-libb2 -system-doubleconversion -system-libmd4c
        - name: ubuntu-18.04
          os: ubuntu-18.04
          deps: libgl-dev libglu-dev 'libxcb*-dev' libx11-xcb-dev libxkbcommon-x11-dev libpcre2-dev libz-dev libfreetype6-dev libpng-dev libjpeg-dev libsqlite3-dev libharfbuzz-dev libb2-dev libdouble-conversion-dev
          tools: ninja-build ccache gcc-10
          install_cmd: sudo apt-get -y install
          configure_flags: -xcb -system-sqlite -system-pcre -system-zlib -system-freetype -system-libpng -system-libjpeg -system-harfbuzz -system-libb2 -system-doubleconversion
        - name: macos-10.15
          os: macos-10.15
          deps: jpeg sqlite libpng pcre2 harfbuzz freetype libb2 double-conversion
          tools: ninja ccache pkg-config
          install_cmd: HOMEBREW_NO_INSTALL_CLEANUP=1 brew install
          configure_flags: -pkg-config -system-sqlite -system-pcre -system-zlib -system-freetype -system-libpng -system-libjpeg -system-harfbuzz -system-libb2 -system-doubleconversion
        - name: windows-2019
          os: windows-2019
          install_cmd: choco install
          install_cmd_postfix: --yes --no-progress
          tools: ninja
          configure_flags: -qt-sqlite -qt-pcre -qt-zlib -qt-freetype -qt-libpng -qt-libjpeg -qt-harfbuzz -no-feature-sql-psql -no-feature-sql-mysql -no-feature-sql-odbc
    runs-on: ${{ matrix.os }}
    steps:
    - name: prepare Linux
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update

        sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-10 100

        sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-10 100
    - name: prepare macOS
      if: runner.os == 'macOS'
      run: echo noop
    - name: prepare Windows
      if: runner.os == 'Windows'
      run: |
        rm -rf "C:/Program Files/PostgreSQL/"

        choco install ccache --version 3.7.12 --yes --no-progress --not-silent --verbose --debug
    - uses: actions/checkout@v2
      with:
        path: source
        repository: ${{ github.event.inputs.repoName }}
        ref: ${{ github.event.inputs.ref }}
    - name: restore ccache
      id: ccache
      uses: actions/cache@v2
      with:
        path: ${{ runner.temp }}/ccache
        key: ccache-${{ matrix.os }}-${{ github.ref }}-${{ github.run_id }}
        restore-keys: >
          ccache-${{ matrix.os }}-${{ github.ref }}-

          ccache-${{ matrix.os }}-${{ env.BRANCH_REF }}-

          ccache-${{ matrix.os }}-refs/heads/dev-

          ccache-${{ matrix.os }}-
    - name: install build dependencies
      run: ${{ matrix.install_cmd }}  ${{ matrix.deps }}  ${{ matrix.install_cmd_postfix }}
      if: matrix.deps != ''
    - name: install compiler tools
      run: ${{ matrix.install_cmd }}  ${{ matrix.tools }}  ${{ matrix.install_cmd_postfix }}
    - name: configure ccache
      run: |
        ccache --set-config sloppiness=file_macro,time_macros

        ccache --set-config cache_dir='${{ runner.temp }}'/ccache

        ccache --set-config compression=true

        ccache --set-config max_size=1G
    - name: print versions and environment
      run: |
        gcc --version    | head -1

        cmake --version  | head -1

        echo Ninja `ninja --version`

        { ninja --help || true ; } 2>&1 | grep "run N jobs in parallel"

        ccache --version | head -1

        ccache --show-config  ||  echo 'Old ccache version does not support --show-config'

        echo Environment:

        printenv
    - name: make build directory
      run: mkdir build
    - name: configure
      working-directory: build
      run: ../source/configure -opensource -confirm-license -ccache -no-pch -debug -nomake tests -nomake examples -prefix '${{ runner.temp }}'/install_dir ${{ matrix.configure_flags }}
    - name: ninja
      working-directory: build
      run: ninja
    - name: various stats
      run: |
        ccache -s

        ccache -x 2>/dev/null || true

        ccache -z
    - name: print logfiles and other info in case of failure
      if: ${{ failure() }}
      run: |
        echo ==== CMakeOutput.log ====

        cat build/CMakeFiles/CMakeOutput.log

        echo

        echo ==== CMakeError.log ====

        cat build/CMakeFiles/CMakeError.log

        echo ==== CMakeCache.txt ====

        cat build/CMakeCache.txt
