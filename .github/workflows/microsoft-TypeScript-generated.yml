name: microsoft/TypeScript
on:
  workflow_dispatch:
    inputs:
      repoName:
        description: Name of the repo
        required: false
      patch:
        description: Base64 encoded patch content
        required: false
      command:
        description: Command to run
        required: false
      ref:
        description: The repo branch, tag, or commit SHA to checkout
        required: false
permissions:
  contents: read
defaults:
  run:
    shell: bash
jobs:
  test:
    strategy:
      fail-fast: false
      matrix:
        os:
        - ubuntu-latest
        - windows-latest
        - macos-14
        node-version:
        - 22
        - 20
        - 18
        - 16
        - 14
        bundle:
        - true
        include:
        - node-version: '*'
          bundle: false
          os: ubuntu-latest
        exclude:
        - node-version: 14
          os: macos-14
    runs-on: ${{ matrix.os }}
    name: Test Node ${{ matrix.node-version }} on ${{ matrix.os }}${{ (!matrix.bundle && ' with --no-bundle') || '' }}
    steps:
    - uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332
      with:
        repository: ${{ github.event.inputs.repoName }}
        ref: ${{ github.event.inputs.ref }}
    - name: Use node version ${{ matrix.node-version }}
      uses: actions/setup-node@60edb5dd545a775178f52524783378180af0d1f8
      with:
        node-version: ${{ matrix.node-version }}
        check-latest: true
    - run: npm ci
    - name: Apply patch
      shell: bash
      run: |

                if [ -n "${{ github.event.inputs.patch }}" ]; then
                   echo "Patch input provided. Applying patch..."
                   echo "${{ github.event.inputs.patch }}" | base64 --decode | sed 's/\r$//'  > patch.diff
                   echo "Decoded patch content:"
                   cat patch.diff 
                   echo "Apply the patch:"
                   git apply patch.diff || {
                     echo "Failed to apply patch"
                     exit 1
                   }
                 else
                   echo "No patch input provided. Skipping patch application."
                 fi
                echo "Print git diff on local repo"
                git diff
    - name: Run custom command
      shell: bash
      run: |
         
                if [ -n "${{ github.event.inputs.command }}" ]; then
                   echo "Start running custom command"
                   echo "${{ github.event.inputs.command }}"
                   output=$(echo "${{ github.event.inputs.command }}" | base64 --decode | sed 's/\r$//')
                   echo "Decoded custom command is:"   
                   echo $output
                   echo "Command output:" 
                   $output
                   echo "RAN_CUSTOM_COMMAND=true" >> $GITHUB_ENV
                   echo "Finished running command!"
                fi
    - name: Exit if custom command was run
      if: env.RAN_CUSTOM_COMMAND == 'true'
      shell: bash
      run: |

                echo "Exiting job after custom command run"
                exit 1
    - name: Tests (ces) (ces)
      id: test
      run: npm run test -- --no-lint --bundle=${{ matrix.bundle }}
    - name: Print baseline diff on failure
      if: ${{ failure() && steps.test.conclusion == 'failure' }}
      run: |
        npx hereby baseline-accept

        git add tests/baselines/reference

        git diff --staged --exit-code
  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332
      with:
        repository: ${{ github.event.inputs.repoName }}
        ref: ${{ github.event.inputs.ref }}
    - uses: actions/setup-node@60edb5dd545a775178f52524783378180af0d1f8
      with:
        node-version: '*'
        check-latest: true
    - run: npm ci
    - name: Linter
      run: npm run lint
  knip:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332
      with:
        repository: ${{ github.event.inputs.repoName }}
        ref: ${{ github.event.inputs.ref }}
    - uses: actions/setup-node@60edb5dd545a775178f52524783378180af0d1f8
      with:
        node-version: '*'
        check-latest: true
    - run: npm ci
    - name: Unused exports
      run: npm run knip
  format:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332
      with:
        repository: ${{ github.event.inputs.repoName }}
        ref: ${{ github.event.inputs.ref }}
    - uses: actions/setup-node@60edb5dd545a775178f52524783378180af0d1f8
      with:
        node-version: '*'
        check-latest: true
    - run: npm ci
    - uses: actions/cache@0c45773b623bea8c8e75f6c82b208c3cf94ea4f9
      with:
        path: ~/.cache/dprint
        key: ${{ runner.os }}-dprint-${{ hashFiles('package-lock.json', '.dprint.jsonc') }}
        restore-keys: >
          ${{ runner.os }}-dprint-
    - name: Check formatting
      run: npx dprint check
  browser-integration:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332
      with:
        repository: ${{ github.event.inputs.repoName }}
        ref: ${{ github.event.inputs.ref }}
    - uses: actions/setup-node@60edb5dd545a775178f52524783378180af0d1f8
      with:
        node-version: '*'
        check-latest: true
    - run: npm ci
    - name: Installing browsers
      run: npx playwright install --with-deps
    - name: Validate the browser can import TypeScript
      run: npx hereby test-browser-integration
  typecheck:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332
      with:
        repository: ${{ github.event.inputs.repoName }}
        ref: ${{ github.event.inputs.ref }}
    - uses: actions/setup-node@60edb5dd545a775178f52524783378180af0d1f8
      with:
        node-version: '*'
        check-latest: true
    - run: npm ci
    - name: Build src
      run: npx hereby build-src
  smoke:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332
      with:
        repository: ${{ github.event.inputs.repoName }}
        ref: ${{ github.event.inputs.ref }}
    - uses: actions/setup-node@60edb5dd545a775178f52524783378180af0d1f8
      with:
        node-version: '*'
        check-latest: true
    - run: |
        npm --version

        # corepack enable npm

        npm install -g $(jq -r '.packageManager' < package.json)

        npm --version
    - run: npm ci
    - run: npx hereby lkg
    - run: |
        node ./scripts/addPackageJsonGitHead.mjs package.json

        npm pack

        mv typescript*.tgz typescript.tgz

        echo "package=$PWD/typescript.tgz" >> "$GITHUB_OUTPUT"
      id: pack
    - name: Apply patch
      shell: bash
      run: |

                if [ -n "${{ github.event.inputs.patch }}" ]; then
                   echo "Patch input provided. Applying patch..."
                   echo "${{ github.event.inputs.patch }}" | base64 --decode | sed 's/\r$//'  > patch.diff
                   echo "Decoded patch content:"
                   cat patch.diff 
                   echo "Apply the patch:"
                   git apply patch.diff || {
                     echo "Failed to apply patch"
                     exit 1
                   }
                 else
                   echo "No patch input provided. Skipping patch application."
                 fi
                echo "Print git diff on local repo"
                git diff
    - name: Run custom command
      shell: bash
      run: |
         
                if [ -n "${{ github.event.inputs.command }}" ]; then
                   echo "Start running custom command"
                   echo "${{ github.event.inputs.command }}"
                   output=$(echo "${{ github.event.inputs.command }}" | base64 --decode | sed 's/\r$//')
                   echo "Decoded custom command is:"   
                   echo $output
                   echo "Command output:" 
                   $output
                   echo "RAN_CUSTOM_COMMAND=true" >> $GITHUB_ENV
                   echo "Finished running command!"
                fi
    - name: Exit if custom command was run
      if: env.RAN_CUSTOM_COMMAND == 'true'
      shell: bash
      run: |

                echo "Exiting job after custom command run"
                exit 1
    - name: Smoke test (ces) (ces)
      run: |
        cd "$(mktemp -d)"

        npm init --yes

        npm install ${{ steps.pack.outputs.package }}


        echo "Testing tsc..."

        npx tsc --version


        echo "Testing tsserver..."

        echo '{"seq": 1, "command": "status"}' | npx tsserver


        node $GITHUB_WORKSPACE/scripts/checkModuleFormat.mjs typescript

        node $GITHUB_WORKSPACE/scripts/checkModuleFormat.mjs typescript/lib/tsserverlibrary
  package-size:
    runs-on: ubuntu-latest
    if: true
    steps:
    - uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332
      with:
        path: pr
        repository: ${{ github.event.inputs.repoName }}
        ref: ${{ github.event.inputs.ref }}
    - uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332
      with:
        path: base
        ref: ${{ github.event.inputs.ref }}
        repository: ${{ github.event.inputs.repoName }}
    - uses: actions/setup-node@60edb5dd545a775178f52524783378180af0d1f8
      with:
        node-version: '*'
        check-latest: true
    - run: |
        npm --version

        # corepack enable npm
    - run: |
        npm install -g $(jq -r '.packageManager' < package.json)

        npm --version
      working-directory: ./pr
    - run: npm ci
      working-directory: ./pr
    - run: npm ci
      working-directory: ./base
    - run: npx hereby lkg
      working-directory: ./pr
    - run: npx hereby lkg
      working-directory: ./base
    - run: |
        echo "See $GITHUB_SERVER_URL/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID for more info."

        node ./pr/scripts/checkPackageSize.mjs ./base ./pr >> $GITHUB_STEP_SUMMARY
  misc:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332
      with:
        repository: ${{ github.event.inputs.repoName }}
        ref: ${{ github.event.inputs.ref }}
    - uses: actions/setup-node@60edb5dd545a775178f52524783378180af0d1f8
      with:
        node-version: '*'
        check-latest: true
    - run: npm ci
    - name: Build scripts
      run: npx hereby scripts
    - name: Apply patch
      shell: bash
      run: |

                if [ -n "${{ github.event.inputs.patch }}" ]; then
                   echo "Patch input provided. Applying patch..."
                   echo "${{ github.event.inputs.patch }}" | base64 --decode | sed 's/\r$//'  > patch.diff
                   echo "Decoded patch content:"
                   cat patch.diff 
                   echo "Apply the patch:"
                   git apply patch.diff || {
                     echo "Failed to apply patch"
                     exit 1
                   }
                 else
                   echo "No patch input provided. Skipping patch application."
                 fi
                echo "Print git diff on local repo"
                git diff
    - name: Run custom command
      shell: bash
      run: |
         
                if [ -n "${{ github.event.inputs.command }}" ]; then
                   echo "Start running custom command"
                   echo "${{ github.event.inputs.command }}"
                   output=$(echo "${{ github.event.inputs.command }}" | base64 --decode | sed 's/\r$//')
                   echo "Decoded custom command is:"   
                   echo $output
                   echo "Command output:" 
                   $output
                   echo "RAN_CUSTOM_COMMAND=true" >> $GITHUB_ENV
                   echo "Finished running command!"
                fi
    - name: Exit if custom command was run
      if: env.RAN_CUSTOM_COMMAND == 'true'
      shell: bash
      run: |

                echo "Exiting job after custom command run"
                exit 1
    - name: ESLint tests (ces) (ces)
      run: npx hereby run-eslint-rules-tests
  self-check:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332
      with:
        repository: ${{ github.event.inputs.repoName }}
        ref: ${{ github.event.inputs.ref }}
    - uses: actions/setup-node@60edb5dd545a775178f52524783378180af0d1f8
      with:
        node-version: '*'
        check-latest: true
    - run: npm ci
    - name: Build tsc
      run: npx hereby tsc
    - name: Clean
      run: npx hereby clean-src
    - name: Self build
      run: npx hereby build-src --built
  baselines:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332
      with:
        repository: ${{ github.event.inputs.repoName }}
        ref: ${{ github.event.inputs.ref }}
    - uses: actions/setup-node@60edb5dd545a775178f52524783378180af0d1f8
      with:
        node-version: '*'
        check-latest: true
    - run: npm ci
    - name: Remove all baselines
      run: rm -rf tests/baselines/reference
    - name: Apply patch
      shell: bash
      run: |

                if [ -n "${{ github.event.inputs.patch }}" ]; then
                   echo "Patch input provided. Applying patch..."
                   echo "${{ github.event.inputs.patch }}" | base64 --decode | sed 's/\r$//'  > patch.diff
                   echo "Decoded patch content:"
                   cat patch.diff 
                   echo "Apply the patch:"
                   git apply patch.diff || {
                     echo "Failed to apply patch"
                     exit 1
                   }
                 else
                   echo "No patch input provided. Skipping patch application."
                 fi
                echo "Print git diff on local repo"
                git diff
    - name: Run custom command
      shell: bash
      run: |
         
                if [ -n "${{ github.event.inputs.command }}" ]; then
                   echo "Start running custom command"
                   echo "${{ github.event.inputs.command }}"
                   output=$(echo "${{ github.event.inputs.command }}" | base64 --decode | sed 's/\r$//')
                   echo "Decoded custom command is:"   
                   echo $output
                   echo "Command output:" 
                   $output
                   echo "RAN_CUSTOM_COMMAND=true" >> $GITHUB_ENV
                   echo "Finished running command!"
                fi
    - name: Exit if custom command was run
      if: env.RAN_CUSTOM_COMMAND == 'true'
      shell: bash
      run: |

                echo "Exiting job after custom command run"
                exit 1
    - name: Run tests (ces) (ces)
      run: npm test &> /dev/null || exit 0
    - name: Accept baselines
      run: |
        npx hereby baseline-accept

        git add tests/baselines/reference
    - name: Check baselines
      id: check-baselines
      run: |
        function print_diff() {
          if ! git diff --staged --exit-code --quiet --diff-filter=$1; then
            echo "$2:"
            git diff --staged --name-only --diff-filter=$1
          fi
        }


        if ! git diff --staged --exit-code --quiet; then
          print_diff ACR "Missing baselines"
          print_diff MTUXB "Modified baselines"
          print_diff D "Unused baselines"
          git diff --staged > fix_baselines.patch
          exit 1
        fi
    - name: Upload baseline diff artifact
      if: ${{ failure() && steps.check-baselines.conclusion == 'failure' }}
      uses: actions/upload-artifact@0b2256b8c012f0828dc542b3febcab082c67f72b
      with:
        name: fix_baselines.patch
        path: fix_baselines.patch
