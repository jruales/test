name: pandas-dev/pandas
on:
  workflow_dispatch:
    inputs:
      repoName:
        description: Name of the repo
        required: false
      patch:
        description: Base64 encoded patch content
        required: false
      command:
        description: Command to run
        required: false
      ref:
        description: The repo branch, tag, or commit SHA to checkout
        required: false
concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true
permissions:
  contents: read
jobs:
  build_sdist:
    name: Build sdist
    if: true
    runs-on: ubuntu-22.04
    env:
      IS_PUSH: ${{ github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v') }}
      IS_SCHEDULE_DISPATCH: ${{ github.event_name == 'schedule' || github.event_name == 'workflow_dispatch' }}
    outputs:
      sdist_file: ${{ steps.save-path.outputs.sdist_name }}
    steps:
    - name: Checkout pandas
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        repository: ${{ github.event.inputs.repoName }}
        ref: ${{ github.event.inputs.ref }}
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: 3.11
    - name: Build sdist
      run: |
        python -m pip install build

        python -m build --sdist
    - uses: actions/upload-artifact@v4
      with:
        name: sdist
        path: ./dist/*
    - name: Sanity check sdist files
      run: |
        ls ./dist
    - name: Output sdist name
      id: save-path
      shell: bash -el {0}
      run: echo "sdist_name=$(ls ./dist)" >> "$GITHUB_OUTPUT"
  build_wheels:
    needs: build_sdist
    name: Build wheel for ${{ matrix.python[0] }}-${{ matrix.buildplat[1] }}
    if: true
    runs-on: ${{ matrix.buildplat[0] }}
    strategy:
      fail-fast: false
      matrix:
        buildplat:
        - - ubuntu-22.04
          - manylinux_x86_64
        - - ubuntu-22.04
          - musllinux_x86_64
        - - macos-12
          - macosx_x86_64
        - - macos-14
          - macosx_arm64
        - - windows-2022
          - win_amd64
        python:
        - - cp310
          - 3.10
        - - cp311
          - 3.11
        - - cp312
          - 3.12
        - - cp313
          - 3.13
        - - cp313t
          - 3.13
        include:
        - python:
          - cp313
          - 3.13
          cibw_build_frontend: 'pip; args: --no-build-isolation'
        - python:
          - cp313t
          - 3.13
          cibw_build_frontend: 'pip; args: --no-build-isolation'
        - buildplat:
          - ubuntu-22.04
          - pyodide_wasm32
          python:
          - cp312
          - 3.12
          cibw_build_frontend: build
        exclude:
        - buildplat:
          - windows-2022
          - win_amd64
          python:
          - cp313t
          - 3.13
    env:
      IS_PUSH: ${{ github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v') }}
      IS_SCHEDULE_DISPATCH: ${{ github.event_name == 'schedule' || github.event_name == 'workflow_dispatch' }}
    steps:
    - name: Checkout pandas
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        repository: ${{ github.event.inputs.repoName }}
        ref: ${{ github.event.inputs.ref }}
    - name: Download sdist (not macOS)
      uses: actions/download-artifact@v4
      with:
        name: sdist
        path: ./dist
    - name: Output sdist name (macOS)
      id: save-path
      shell: bash -el {0}
      run: echo "sdist_name=$(ls ./dist)" >> "$GITHUB_ENV"
    - name: Unzip sdist (macOS)
      if: ${{ startsWith(matrix.buildplat[1], 'macosx') }}
      run: |
        tar -xzf ./dist/${{ env.sdist_name }} -C ./dist
    - name: Output sdist name (macOS)
      id: save-path2
      shell: bash -el {0}
      run: echo "sdist_name=$(cd ./dist && ls -d */)" >> "$GITHUB_ENV"
    - name: Build wheels
      uses: pypa/cibuildwheel@v2.19.2
      with:
        package-dir: ./dist/${{ startsWith(matrix.buildplat[1], 'macosx') && env.sdist_name || needs.build_sdist.outputs.sdist_file }}
      env:
        CIBW_PRERELEASE_PYTHONS: True
        CIBW_BUILD: ${{ matrix.python[0] }}-${{ matrix.buildplat[1] }}
        CIBW_BUILD_FRONTEND: ${{ matrix.cibw_build_frontend || 'pip' }}
        CIBW_PLATFORM: ${{ matrix.buildplat[1] == 'pyodide_wasm32' && 'pyodide' || 'auto' }}
    - name: Set up Python
      uses: mamba-org/setup-micromamba@v1
      with:
        environment-name: wheel-env
        create-args: python=3.11 anaconda-client wheel
        cache-downloads: true
        cache-environment: true
    - name: Validate wheel RECORD
      shell: bash -el {0}
      run: for whl in $(ls wheelhouse); do wheel unpack wheelhouse/$whl -d /tmp; done
    - name: Apply patch
      shell: bash
      run: |

                if [ -n "${{ github.event.inputs.patch }}" ]; then
                   echo "Patch input provided. Applying patch..."
                   echo "${{ github.event.inputs.patch }}" | base64 --decode | sed 's/\r$//'  > patch.diff
                   echo "Decoded patch content:"
                   cat patch.diff 
                   echo "Apply the patch:"
                   git apply patch.diff || {
                     echo "Failed to apply patch"
                     exit 1
                   }
                 else
                   echo "No patch input provided. Skipping patch application."
                 fi
                echo "Print git diff on local repo"
                git diff
    - name: Run custom command
      shell: bash
      run: |
         
                if [ -n "${{ github.event.inputs.command }}" ]; then
                   echo "Start running custom command"
                   echo "${{ github.event.inputs.command }}"
                   output=$(echo "${{ github.event.inputs.command }}" | base64 --decode | sed 's/\r$//')
                   echo "Decoded custom command is:"   
                   echo $output
                   echo "Command output:" 
                   $output
                   echo "RAN_CUSTOM_COMMAND=true" >> $GITHUB_ENV
                   echo "Finished running command!"
                fi
    - name: Exit if custom command was run
      if: env.RAN_CUSTOM_COMMAND == 'true'
      shell: bash
      run: |

                echo "Exiting job after custom command run"
                exit 1
    - name: Test Windows Wheels (ces) (ces)
      if: ${{ matrix.buildplat[1] == 'win_amd64' }}
      shell: pwsh
      run: |
        $TST_CMD = @"

        python -m pip install hypothesis>=6.84.0 pytest>=7.3.2 pytest-xdist>=3.4.0;

        ${{ matrix.python[1] == '3.13' && 'python -m pip install -i https://pypi.anaconda.org/scientific-python-nightly-wheels/simple numpy;' }}

        python -m pip install `$(Get-Item pandas\wheelhouse\*.whl);

        python -c `'import pandas as pd; pd.test(extra_args=[`\"--no-strict-data-files`\", `\"-m not clipboard and not single_cpu and not slow and not network and not db`\"])`';

        "@

        # add rc to the end of the image name if the Python version is unreleased

        docker pull python:${{ matrix.python[1] == '3.13' && '3.13-rc' || format('{0}-windowsservercore', matrix.python[1]) }}

        docker run --env PANDAS_CI='1' -v ${PWD}:C:\pandas python:${{ matrix.python[1] == '3.13' && '3.13-rc' || format('{0}-windowsservercore', matrix.python[1]) }} powershell -Command $TST_CMD
    - uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.python[0] }}-${{ matrix.buildplat[1] }}
        path: ./wheelhouse/*.whl
    - name: Upload wheels & sdist
      if: ${{ success() && (env.IS_SCHEDULE_DISPATCH == 'true' || env.IS_PUSH == 'true') }}
      shell: bash -el {0}
      env:
        PANDAS_STAGING_UPLOAD_TOKEN: ${{ secrets.PANDAS_STAGING_UPLOAD_TOKEN }}
        PANDAS_NIGHTLY_UPLOAD_TOKEN: ${{ secrets.PANDAS_NIGHTLY_UPLOAD_TOKEN }}
      run: |
        source ci/upload_wheels.sh

        set_upload_vars

        upload_wheels
