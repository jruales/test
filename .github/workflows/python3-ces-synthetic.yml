name: Code Execution - python3

on:
   workflow_dispatch:
    inputs:
      test:
        description: 'Base64 encoded JSON blob of test files'
        required: false
        default: ''
      source:
        description: 'Base64 encoded JSON blob of files to be tested'
        required: false
        default: ''
      expectedOutput:
        description: 'expected output from the code for test input'
        required: false
        default: ''

jobs:
  run-CodeSnippet:
    runs-on: ubuntu-latest
    container:
      #image: mcr.microsoft.com/vscode/devcontainers/universal:2-linux  # Specify your container image
      image: mcr.microsoft.com/vscode/devcontainers/python:3  # Specify your container image
      options: --privileged  # Optional: Use if your container needs privileged mode

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3


      
      - name: Unpack source and test files
        shell: bash
        run: |
              # Write a Python script to expand base 64 encoded JSON file system
              # into individual files in a "bin" directory.
              SOURCE="${{ github.event.inputs.source }}"
              TEST="${{ github.event.inputs.test }}"

              cat << 'EOF' > fileSystemExpansion.py
              import sys
              import os
              import base64
              import json

              def main():
                  output_dir = sys.argv[1]
                  encoded_json = sys.argv[2]
                  decoded_json = base64.b64decode(encoded_json).decode('utf-8')
                  file_system = json.loads(decoded_json)

                  os.makedirs(output_dir, exist_ok=True)

                  for file_name, file_content in file_system.items():
                      file_path = os.path.join(output_dir, file_name)
                      with open(file_path, 'w') as file:
                          file.write(file_content)

              if __name__ == "__main__":
                 main()
              EOF

              python3 fileSystemExpansion.py source "$SOURCE"
              python3 fileSystemExpansion.py test "$TEST"



 
      - name: Run test snippet (ces)
        shell: bash
        run: |
              cp source/* .
              cp test/* .
              ls
              echo  "======================="
              echo "Running Test"
              python -m pip install requests
              python -m pip install shapely
              echo  "======================="
              cat << 'EOF' > custom_test_runner.py
              import unittest
              import json
              import sys
              import os

              class CustomTestResult(unittest.TextTestResult):
                  def __init__(self, *args, **kwargs):
                      super().__init__(*args, **kwargs)
                      self.passed = 0
                      self.failed = 0
                      self.errors = []

                  def addSuccess(self, test):
                      super().addSuccess(test)
                      self.passed += 1

                  def addFailure(self, test, err):
                      super().addFailure(test, err)
                      self.failed += 1
                      self.errors.append(self._exc_info_to_string(err, test))

                  def addError(self, test, err):
                      super().addError(test, err)
                      self.failed += 1
                      self.errors.append(self._exc_info_to_string(err, test))

              class CustomTestRunner(unittest.TextTestRunner):
                  def _makeResult(self):
                      return CustomTestResult(self.stream, self.descriptions, self.verbosity)

                  def run(self, test):
                      result = super().run(test)
                      output = {
                          "Passed": result.passed,
                          "Failed": result.failed,
                          "Error": "\n".join(result.errors) if result.errors else ""
                      }
                      print(json.dumps(output, indent=2))
                      # Write the result to a JSON file in the results directory
                      test_file_name = sys.argv[1]
                      result_file_name = os.path.join('results', f"{os.path.splitext(test_file_name)[0]}.json")
                      os.makedirs(os.path.dirname(result_file_name), exist_ok=True)
                      with open(result_file_name, 'w') as f:
                          json.dump(output, f, indent=2)
                      return result

              if __name__ == "__main__":
                  test_file = sys.argv[1]
                  loader = unittest.TestLoader()
                  suite = loader.discover('.', pattern=test_file)
                  runner = CustomTestRunner()
                  runner.run(suite)
              EOF

              for test_file in test/*; do
                  file_name=$(basename "$test_file")
                  echo "Running $file_name"
                  python3 custom_test_runner.py "$file_name"
                  echo "========================"
              done
              echo "========================"
              echo "!Finished executing code!"

      

      - name: Compare and Log test result
        shell: bash
        run: |
              EXPECTED="${{ github.event.inputs.expectedOutput }}"
              ACTUAL=$(cat output.txt)

               # Visualize line endings
              echo "EXPECTED OUTPUT:"
              echo "$EXPECTED" | cat -A

              echo "ACTUAL OUTPUT:"
              echo "$ACTUAL" | cat -A 

              # Write a Python script to process the inputs
              cat << 'EOF' > logTestResult.py
              import sys

              def main():
                    expected = sys.argv[1].replace('\\n', '\n')
                    actual = sys.stdin.read()

                    expected_array = expected.strip().split('\n')
                    actual_array = actual.strip().split('\n')

                    print("Expected array length:", len(expected_array))
                    print("Actual array length:", len(actual_array))

                    pass_count = 0
                    fail_count = 0

                    for i in range(max(len(expected_array), len(actual_array))):
                        if i < len(expected_array) and i < len(actual_array):
                            if expected_array[i] == actual_array[i]:
                                pass_count += 1
                            else:
                                fail_count += 1
                                print(f"Test {i + 1} Failed")
                                print(f"Expected: '{expected_array[i]}'")
                                print(f"Actual: '{actual_array[i]}'")
                        else:
                            fail_count += 1
                            print(f"Test {i + 1} Failed (Missing in one of the arrays)")

                    print("Tests Passed:", pass_count)
                    print("Tests Failed:", fail_count)

              if __name__ == "__main__":
                 main()
              EOF

              # Run the Python script
              python3 logTestResult.py "$EXPECTED" <<< "$ACTUAL"
              echo "========================"
              echo "!!== RUN COMPLETED ==!!"
              echo "========================"
