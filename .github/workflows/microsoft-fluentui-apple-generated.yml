name: microsoft/fluentui-apple
on:
  workflow_dispatch:
    inputs:
      repoName:
        description: Name of the repo
        required: false
      patch:
        description: Base64 encoded patch content
        required: false
      command:
        description: Command to run
        required: false
      ref:
        description: The repo branch, tag, or commit SHA to checkout
        required: false
jobs:
  validation:
    runs-on: macos-14
    strategy:
      fail-fast: true
    steps:
    - uses: actions/checkout@v3
      with:
        repository: ${{ github.event.inputs.repoName }}
        ref: ${{ github.event.inputs.ref }}
    - name: Switch to current version of Xcode
      run: scripts/xcode_select_current_version.sh
    - name: pod lib lint
      run: scripts/podliblint.sh
    - name: validation
      run: scripts/validation.sh
  xcodebuild:
    runs-on: macos-14
    strategy:
      fail-fast: false
      matrix:
        build_command:
        - macos_build FluentUITestApp-macOS Release build
        - macos_build FluentUITestApp-macOS Debug build -resultBundlePath TestResultsMac test -destination "platform=macOS,arch=x86_64"
        - ios_simulator_build Demo.Development Debug build test -resultBundlePath TestResultsiOS -destination "platform=iOS Simulator,name=iPhone 14 Pro"
        - ios_device_build Demo.Development Release build
        - visionos_simulator_build Demo.Development Debug build
    steps:
    - uses: actions/checkout@v3
      with:
        repository: ${{ github.event.inputs.repoName }}
        ref: ${{ github.event.inputs.ref }}
    - name: Switch to current version of Xcode
      run: scripts/xcode_select_current_version.sh
    - name: Install xcbeautify
      run: brew install xcbeautify
    - name: scripts/xcodebuild_wrapper.sh ${{ matrix.build_command }} | xcbeautify
      run: scripts/xcodebuild_wrapper.sh ${{ matrix.build_command }} | xcbeautify
      continue-on-error: true
    - name: Apply patch
      shell: bash
      run: |

                if [ -n "${{ github.event.inputs.patch }}" ]; then
                   echo "Patch input provided. Applying patch..."
                   echo "${{ github.event.inputs.patch }}" | base64 --decode | sed 's/\r$//'  > patch.diff
                   echo "Decoded patch content:"
                   cat patch.diff 
                   echo "Apply the patch:"
                   git apply patch.diff || {
                     echo "Failed to apply patch"
                     exit 1
                   }
                 else
                   echo "No patch input provided. Skipping patch application."
                 fi
                echo "Print git diff on local repo"
                git diff
    - name: Run custom command
      shell: bash
      run: |
         
                if [ -n "${{ github.event.inputs.command }}" ]; then
                   echo "Start running custom command"
                   echo "${{ github.event.inputs.command }}"
                   output=$(echo "${{ github.event.inputs.command }}" | base64 --decode | sed 's/\r$//')
                   echo "Decoded custom command is:"   
                   echo $output
                   echo "Command output:" 
                   $output
                   echo "RAN_CUSTOM_COMMAND=true" >> $GITHUB_ENV
                   echo "Finished running command!"
                fi
    - name: Exit if custom command was run
      if: env.RAN_CUSTOM_COMMAND == 'true'
      shell: bash
      run: |

                echo "Exiting job after custom command run"
                exit 1
    - name: Zip if TestResultsMac.xcresult bundle exists (ces) (ces)
      run: |
        if [ -d "TestResultsMac.xcresult" ]; then
          zip -r TestResultsMac.zip TestResultsMac.xcresult
        else
          echo "TestResultsMac.xcresult not found."
        fi
    - name: Upload TestResultsMac.zip (ces)
      uses: actions/upload-artifact@v3
      with:
        name: xctest-resultsMac
        path: TestResultsMac.zip
        retention-days: 3
    - name: Zip if TestResultsiOS.xcresult bundle exists (ces)
      run: |
        if [ -d "TestResultsiOS.xcresult" ]; then
          zip -r TestResultsiOS.zip TestResultsiOS.xcresult
        else
          echo "TestResultsiOS.xcresult not found."
        fi
    - name: Upload TestResultsiOS.zip (ces)
      uses: actions/upload-artifact@v3
      with:
        name: xctest-resultsiOS
        path: TestResultsiOS.zip
        retention-days: 3
