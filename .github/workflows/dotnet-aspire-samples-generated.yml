name: dotnet/aspire-samples
on:
  workflow_dispatch:
    inputs:
      repoName:
        description: Name of the repo
        required: false
      patch:
        description: Base64 encoded patch content
        required: false
      command:
        description: Command to run
        required: false
      ref:
        description: The repo branch, tag, or commit SHA to checkout
        required: false
jobs:
  build:
    strategy:
      matrix:
        os:
        - ubuntu-latest
        - windows-latest
        sdk:
        - sdk-baseline
        - sdk-global-json
        exclude:
        - os: windows-latest
          sdk: sdk-baseline
    runs-on: ${{ matrix.os }}
    name: Build & Test Samples
    env:
      DOTNET_BASELINE_SDK_VERSION: 8.0.1xx
      DOTNET_CLI_TELEMETRY_OPTOUT: true
      DOTNET_NOLOGO: true
      DOTNET_MULTILEVEL_LOOKUP: false
      DOTNET_INSTALL_DIR: ${{ matrix.os == 'ubuntu-latest' && '' || 'dotnet' }}
      ASPIRE_ALLOW_UNSECURED_TRANSPORT: true
    steps:
    - uses: actions/checkout@v4
      with:
        repository: ${{ github.event.inputs.repoName }}
        ref: ${{ github.event.inputs.ref }}
    - name: Dapr tool installer
      uses: dapr/setup-dapr@v2
      with:
        version: 1.13.0
      id: install-dapr
    - name: Initialize Dapr (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: ${{ steps.install-dapr.outputs.dapr-path }} init --slim
    - name: Initialize Dapr (Windows)
      if: matrix.os == 'windows-latest'
      run: ${{ steps.install-dapr.outputs.dapr-path }} init --slim
    - name: 'Install .NET SDK (baseline: ${{ env.DOTNET_BASELINE_SDK_VERSION }})'
      if: matrix.os == 'ubuntu-latest' && matrix.sdk == 'sdk-baseline'
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_BASELINE_SDK_VERSION }}
    - name: Install .NET SDK (global.json)
      if: matrix.sdk == 'sdk-global-json'
      uses: actions/setup-dotnet@v4
      with:
        global-json-file: ${{ matrix.os == 'ubuntu-latest' && './global.json' || '.\global.json' }}
    - uses: actions/setup-node@v4
      with:
        node-version: 20.x
    - name: Build
      run: ${{ matrix.os == 'ubuntu-latest' && './build.sh' || '.\build.cmd' }}
      env:
        DAPR_CLI_PATH: ${{ steps.install-dapr.outputs.dapr-path }}
    - name: Apply patch
      shell: bash
      run: |

                if [ -n "${{ github.event.inputs.patch }}" ]; then
                   echo "Patch input provided. Applying patch..."
                   echo "${{ github.event.inputs.patch }}" | base64 --decode | sed 's/\r$//'  > patch.diff
                   echo "Decoded patch content:"
                   cat patch.diff 
                   echo "Apply the patch:"
                   git apply patch.diff || {
                     echo "Failed to apply patch"
                     exit 1
                   }
                 else
                   echo "No patch input provided. Skipping patch application."
                 fi
                echo "Print git diff on local repo"
                git diff
    - name: Run custom command
      shell: bash
      run: |
         
                if [ -n "${{ github.event.inputs.command }}" ]; then
                   echo "Start running custom command"
                   echo "${{ github.event.inputs.command }}"
                   output=$(echo "${{ github.event.inputs.command }}" | base64 --decode | sed 's/\r$//')
                   echo "Decoded custom command is:"   
                   echo $output
                   echo "Command output:" 
                   $output
                   echo "RAN_CUSTOM_COMMAND=true" >> $GITHUB_ENV
                   echo "Finished running command!"
                fi
    - name: Exit if custom command was run
      if: env.RAN_CUSTOM_COMMAND == 'true'
      shell: bash
      run: |

                echo "Exiting job after custom command run"
                exit 1
    - name: Test (ces) (ces)
      id: test
      if: matrix.os == 'ubuntu-latest'
      run: |
        dotnet test ./tests/SamplesTests.sln --logger console --logger trx --logger html --logger GitHubActions --results-directory ./TestResults --blame --  RunConfiguration.CollectSourceInformation=true
      env:
        DAPR_CLI_PATH: ${{ steps.install-dapr.outputs.dapr-path }}
    - name: Publish Test Results (ces)
      if: (success() || steps.test.conclusion == 'failure') && matrix.os == 'ubuntu-latest'
      uses: actions/upload-artifact@v4
      with:
        name: TestResults_${{ matrix.os }}_${{ matrix.sdk }}
        path: ./TestResults
