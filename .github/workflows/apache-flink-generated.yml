name: apache/flink
on:
  workflow_dispatch:
    inputs:
      repoName:
        description: Name of the repo
        required: false
      patch:
        description: Base64 encoded patch content
        required: false
      command:
        description: Command to run
        required: false
      ref:
        description: The repo branch, tag, or commit SHA to checkout
        required: false
permissions: read-all
env:
  MOUNTED_WORKING_DIR: /__w/flink/flink
  CONTAINER_LOCAL_WORKING_DIR: /root/flink
  FLINK_ARTIFACT_DIR: /root/artifact-directory
  FLINK_ARTIFACT_FILENAME: flink_artifacts.tar.gz
  MAVEN_REPO_FOLDER: /root/.m2/repository
  MAVEN_ARGS: -Dmaven.repo.local=/root/.m2/repository
  DOCKER_IMAGES_CACHE_FOLDER: /root/.docker-cache
jobs:
  compile:
    name: Compile
    runs-on: ubuntu-22.04
    container:
      image: mapohl/flink-ci:FLINK-34194
      options: --init --privileged
    env:
      GHA_JOB_TIMEOUT: 240
    outputs:
      stringified-workflow-name: ${{ steps.workflow-prep-step.outputs.stringified_value }}
    steps:
    - name: Flink Checkout
      uses: actions/checkout@v4
      with:
        persist-credentials: false
        repository: ${{ github.event.inputs.repoName }}
        ref: ${{ github.event.inputs.ref }}
    - name: Initialize job
      uses: ./.github/actions/job_init
      with:
        jdk_version: ${{ inputs.jdk_version }}
        maven_repo_folder: ${{ env.MAVEN_REPO_FOLDER }}
        source_directory: ${{ env.MOUNTED_WORKING_DIR }}
        target_directory: ${{ env.CONTAINER_LOCAL_WORKING_DIR }}
    - name: Stringify workflow name
      uses: ./.github/actions/stringify
      id: workflow-prep-step
      with:
        value: ${{ github.workflow }}-${{ inputs.workflow-caller-id }}
    - name: Compile Flink
      uses: ./.github/actions/run_mvn
      timeout-minutes: ${{ fromJSON(env.GHA_JOB_TIMEOUT) }}
      with:
        working_directory: ${{ env.CONTAINER_LOCAL_WORKING_DIR }}
        maven-parameters: test-compile -Dflink.markBundledAsOptional=false -Dfast
        env: ${{ inputs.environment }}
    - name: Collect build artifacts
      working-directory: ${{ env.CONTAINER_LOCAL_WORKING_DIR }}
      run: |
        ./tools/azure-pipelines/create_build_artifact.sh
    - name: Upload artifacts to make them available in downstream jobs
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts-${{ steps.workflow-prep-step.outputs.stringified_value }}-${{ github.run_number }}
        path: ${{ env.FLINK_ARTIFACT_DIR }}/${{ env.FLINK_ARTIFACT_FILENAME }}
        if-no-files-found: error
        retention-days: 1
  packaging:
    name: Test packaging/licensing
    needs: compile
    runs-on: ubuntu-22.04
    container:
      image: mapohl/flink-ci:FLINK-34194
      options: --init --privileged
    steps:
    - name: Flink Checkout
      uses: actions/checkout@v4
      with:
        persist-credentials: false
        repository: ${{ github.event.inputs.repoName }}
        ref: ${{ github.event.inputs.ref }}
    - name: Initialize job
      uses: ./.github/actions/job_init
      with:
        jdk_version: ${{ inputs.jdk_version }}
        maven_repo_folder: ${{ env.MAVEN_REPO_FOLDER }}
        source_directory: ${{ env.MOUNTED_WORKING_DIR }}
        target_directory: ${{ env.CONTAINER_LOCAL_WORKING_DIR }}
    - name: Download build artifacts from compile job
      uses: actions/download-artifact@v4
      with:
        name: build-artifacts-${{ needs.compile.outputs.stringified-workflow-name }}-${{ github.run_number }}
        path: ${{ env.FLINK_ARTIFACT_DIR }}
    - name: Unpack build artifact
      working-directory: ${{ env.CONTAINER_LOCAL_WORKING_DIR }}
      run: |
        ./tools/azure-pipelines/unpack_build_artifact.sh
    - name: Apply patch
      shell: bash
      run: |

                if [ -n "${{ github.event.inputs.patch }}" ]; then
                   echo "Patch input provided. Applying patch..."
                   echo "${{ github.event.inputs.patch }}" | base64 --decode | sed 's/\r$//'  > patch.diff
                   echo "Decoded patch content:"
                   cat patch.diff 
                   echo "Apply the patch:"
                   git apply patch.diff || {
                     echo "Failed to apply patch"
                     exit 1
                   }
                 else
                   echo "No patch input provided. Skipping patch application."
                 fi
                echo "Print git diff on local repo"
                git diff
    - name: Run custom command
      shell: bash
      run: |
         
                if [ -n "${{ github.event.inputs.command }}" ]; then
                   echo "Start running custom command"
                   echo "${{ github.event.inputs.command }}"
                   output=$(echo "${{ github.event.inputs.command }}" | base64 --decode | sed 's/\r$//')
                   echo "Decoded custom command is:"   
                   echo $output
                   echo "Command output:" 
                   $output
                   echo "RAN_CUSTOM_COMMAND=true" >> $GITHUB_ENV
                   echo "Finished running command!"
                fi
    - name: Exit if custom command was run
      if: env.RAN_CUSTOM_COMMAND == 'true'
      shell: bash
      run: |

                echo "Exiting job after custom command run"
                exit 1
    - name: Test (ces) (ces)
      working-directory: ${{ env.CONTAINER_LOCAL_WORKING_DIR }}
      run: |
        ${{ inputs.environment }} ./tools/ci/compile_ci.sh || exit $?
  test:
    name: 'Test (module: ${{ matrix.module }})'
    needs: compile
    runs-on: ubuntu-22.04
    container:
      image: mapohl/flink-ci:FLINK-34194
      options: --init --privileged
      volumes:
      - /mnt:/root
    env:
      GHA_JOB_TIMEOUT: 240
    strategy:
      fail-fast: false
      matrix:
        include:
        - module: core
          stringified-module-name: core
        - module: python
          stringified-module-name: python
        - module: table
          stringified-module-name: table
        - module: connect
          stringified-module-name: connect
        - module: tests
          stringified-module-name: tests
        - module: misc
          stringified-module-name: misc
    steps:
    - name: Flink Checkout
      uses: actions/checkout@v4
      with:
        persist-credentials: false
        repository: ${{ github.event.inputs.repoName }}
        ref: ${{ github.event.inputs.ref }}
    - name: Initialize job
      uses: ./.github/actions/job_init
      with:
        jdk_version: ${{ inputs.jdk_version }}
        maven_repo_folder: ${{ env.MAVEN_REPO_FOLDER }}
        source_directory: ${{ env.MOUNTED_WORKING_DIR }}
        target_directory: ${{ env.CONTAINER_LOCAL_WORKING_DIR }}
    - name: Set coredump pattern
      working-directory: ${{ env.CONTAINER_LOCAL_WORKING_DIR }}
      run: sudo sysctl -w kernel.core_pattern=core.%p
    - name: Download build artifacts from compile job
      uses: actions/download-artifact@v4
      with:
        name: build-artifacts-${{ needs.compile.outputs.stringified-workflow-name }}-${{ github.run_number }}
        path: ${{ env.FLINK_ARTIFACT_DIR }}
    - name: Unpack build artifact
      working-directory: ${{ env.CONTAINER_LOCAL_WORKING_DIR }}
      run: |
        ./tools/azure-pipelines/unpack_build_artifact.sh
    - name: Try loading Docker images from Cache
      id: docker-cache
      uses: actions/cache@v4
      with:
        path: ${{ env.DOCKER_IMAGES_CACHE_FOLDER }}
        key: ${{ matrix.module }}-docker-${{ runner.os }}-${{ hashFiles('**/cache_docker_images.sh', '**/flink-test-utils-parent/**/DockerImageVersions.java') }}
        restore-keys: ${{ matrix.module }}-docker-${{ runner.os }}
    - name: Load Docker images if not present in cache, yet
      if: ${{ !cancelled() && !steps.docker-cache.cache.hit }}
      working-directory: ${{ env.CONTAINER_LOCAL_WORKING_DIR }}
      run: ./tools/azure-pipelines/cache_docker_images.sh load
    - name: Apply patch
      shell: bash
      run: |

                if [ -n "${{ github.event.inputs.patch }}" ]; then
                   echo "Patch input provided. Applying patch..."
                   echo "${{ github.event.inputs.patch }}" | base64 --decode | sed 's/\r$//'  > patch.diff
                   echo "Decoded patch content:"
                   cat patch.diff 
                   echo "Apply the patch:"
                   git apply patch.diff || {
                     echo "Failed to apply patch"
                     exit 1
                   }
                 else
                   echo "No patch input provided. Skipping patch application."
                 fi
                echo "Print git diff on local repo"
                git diff
    - name: Run custom command
      shell: bash
      run: |
         
                if [ -n "${{ github.event.inputs.command }}" ]; then
                   echo "Start running custom command"
                   echo "${{ github.event.inputs.command }}"
                   output=$(echo "${{ github.event.inputs.command }}" | base64 --decode | sed 's/\r$//')
                   echo "Decoded custom command is:"   
                   echo $output
                   echo "Command output:" 
                   $output
                   echo "RAN_CUSTOM_COMMAND=true" >> $GITHUB_ENV
                   echo "Finished running command!"
                fi
    - name: Exit if custom command was run
      if: env.RAN_CUSTOM_COMMAND == 'true'
      shell: bash
      run: |

                echo "Exiting job after custom command run"
                exit 1
    - name: Test - ${{ matrix.module }} (ces) (ces)
      id: test-run
      working-directory: ${{ env.CONTAINER_LOCAL_WORKING_DIR }}
      env:
        IT_CASE_S3_BUCKET: ${{ secrets.s3_bucket }}
        IT_CASE_S3_ACCESS_KEY: ${{ secrets.s3_access_key }}
        IT_CASE_S3_SECRET_KEY: ${{ secrets.s3_secret_key }}
      timeout-minutes: ${{ fromJSON(env.GHA_JOB_TIMEOUT) }}
      run: |
        ${{ inputs.environment }} PROFILE="$PROFILE -Pgithub-actions" ./tools/azure-pipelines/uploading_watchdog.sh \
            ./tools/ci/test_controller.sh ${{ matrix.module }}
    - name: Post-build Disk Info
      if: ${{ always() }}
      shell: bash
      run: df -h
    - name: Top 15 biggest directories in terms of used disk space
      if: ${{ always() }}
      shell: bash
      run: |
        du -ah --exclude="proc" -t100M . | sort -h -r | head -n 15
    - name: Post-process build artifacts
      working-directory: ${{ env.CONTAINER_LOCAL_WORKING_DIR }}
      run: find ${{ steps.test-run.outputs.debug-files-output-dir }} -type f -exec rename 's/[:<>|*?]/-/' {} \;
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      if: ${{ failure() && steps.test-run.outputs.debug-files-output-dir }} != ''
      with:
        name: logs-test-${{ needs.compile.outputs.stringified-workflow-name }}-${{ github.run_number }}-${{ matrix.stringified-module-name }}-${{ steps.test-run.outputs.debug-files-name }}
        path: ${{ steps.test-run.outputs.debug-files-output-dir }}
    - name: Save Docker images to cache
      working-directory: ${{ env.CONTAINER_LOCAL_WORKING_DIR }}
      if: ${{ !cancelled() && (failure() || !steps.docker-cache.cache.hit) }}
      run: ./tools/azure-pipelines/cache_docker_images.sh save
  e2e:
    name: E2E (group ${{ matrix.group }})
    needs: compile
    runs-on: ubuntu-22.04
    timeout-minutes: 310
    env:
      GHA_JOB_TIMEOUT: 310
      E2E_CACHE_FOLDER: ${{ github.workspace }}/.e2e-cache
      E2E_TARBALL_CACHE: ${{ github.workspace }}/.e2e-tar-cache
      MAVEN_REPO_FOLDER: ${{ github.workspace }}/.m2/repository
      MAVEN_ARGS: -Dmaven.repo.local=${{ github.workspace }}/.m2/repository
      FLINK_ARTIFACT_DIR: ${{ github.workspace }}
      DOCKER_IMAGES_CACHE_FOLDER: ${{ github.workspace }}/.docker-cache
    strategy:
      fail-fast: false
      matrix:
        group:
        - 1
        - 2
    steps:
    - name: Flink Checkout
      uses: actions/checkout@v4
      with:
        persist-credentials: false
        repository: ${{ github.event.inputs.repoName }}
        ref: ${{ github.event.inputs.ref }}
    - name: Initialize job
      uses: ./.github/actions/job_init
      with:
        jdk_version: ${{ inputs.jdk_version }}
        maven_repo_folder: ${{ env.MAVEN_REPO_FOLDER }}
    - name: Install missing packages
      run: sudo apt-get install -y net-tools docker-compose zip
    - name: Install OpenSSL
      run: |
        sudo apt-get install -y bc libapr1

        wget -r --no-parent -nd --accept=libssl1.0.0_*ubuntu5.*_amd64.deb http://security.ubuntu.com/ubuntu/pool/main/o/openssl1.0/

        sudo apt install ./libssl1.0.0_*.deb
    - name: Download build artifacts from compile job
      uses: actions/download-artifact@v4
      with:
        name: build-artifacts-${{ needs.compile.outputs.stringified-workflow-name }}-${{ github.run_number }}
        path: ${{ env.FLINK_ARTIFACT_DIR }}
    - name: Unpack build artifact
      run: ./tools/azure-pipelines/unpack_build_artifact.sh
    - name: Create cache directories
      run: |
        mkdir -p ${{ env.E2E_CACHE_FOLDER }}

        mkdir -p ${{ env.E2E_TARBALL_CACHE }}

        mkdir -p ${{ env.DOCKER_IMAGES_CACHE_FOLDER }}
    - name: Load E2E files from Cache
      uses: actions/cache@v4
      with:
        path: ${{ env.E2E_CACHE_FOLDER }}
        key: e2e-cache-${{ matrix.group }}-${{ hashFiles('**/flink-end-to-end-tests/**/*.java', '!**/avro/**') }}
    - name: Load E2E artifacts from Cache
      uses: actions/cache@v4
      with:
        path: ${{ env.E2E_TARBALL_CACHE }}
        key: e2e-artifact-cache-${{ matrix.group }}-${{ hashFiles('**/flink-end-to-end-tests/**/*.sh') }}
        restore-keys: e2e-artifact-cache-${{ matrix.group }}
    - name: Try loading Docker images from Cache
      id: docker-cache
      uses: actions/cache@v4
      with:
        path: ${{ env.DOCKER_IMAGES_CACHE_FOLDER }}
        key: e2e-${{ matrix.group }}-docker-${{ runner.os }}-${{ hashFiles('**/cache_docker_images.sh', '**/flink-test-utils-parent/**/DockerImageVersions.java') }}
    - name: Load Docker images if not present in Cache, yet
      if: ${{ !cancelled() && !steps.docker-cache.cache.hit }}
      run: ./tools/azure-pipelines/cache_docker_images.sh load
    - name: Build Flink
      uses: ./.github/actions/run_mvn
      with:
        maven-parameters: install -DskipTests -Dfast $PROFILE -Pskip-webui-build
        env: ${{ inputs.environment }}
    - name: Apply patch
      shell: bash
      run: |

                if [ -n "${{ github.event.inputs.patch }}" ]; then
                   echo "Patch input provided. Applying patch..."
                   echo "${{ github.event.inputs.patch }}" | base64 --decode | sed 's/\r$//'  > patch.diff
                   echo "Decoded patch content:"
                   cat patch.diff 
                   echo "Apply the patch:"
                   git apply patch.diff || {
                     echo "Failed to apply patch"
                     exit 1
                   }
                 else
                   echo "No patch input provided. Skipping patch application."
                 fi
                echo "Print git diff on local repo"
                git diff
    - name: Run custom command
      shell: bash
      run: |
         
                if [ -n "${{ github.event.inputs.command }}" ]; then
                   echo "Start running custom command"
                   echo "${{ github.event.inputs.command }}"
                   output=$(echo "${{ github.event.inputs.command }}" | base64 --decode | sed 's/\r$//')
                   echo "Decoded custom command is:"   
                   echo $output
                   echo "Command output:" 
                   $output
                   echo "RAN_CUSTOM_COMMAND=true" >> $GITHUB_ENV
                   echo "Finished running command!"
                fi
    - name: Exit if custom command was run
      if: env.RAN_CUSTOM_COMMAND == 'true'
      shell: bash
      run: |

                echo "Exiting job after custom command run"
                exit 1
    - name: Run E2E Tests (ces) (ces)
      id: test-run
      env:
        IT_CASE_S3_BUCKET: ${{ secrets.s3_bucket }}
        IT_CASE_S3_ACCESS_KEY: ${{ secrets.s3_access_key }}
        IT_CASE_S3_SECRET_KEY: ${{ secrets.s3_secret_key }}
      timeout-minutes: ${{ fromJSON(env.GHA_JOB_TIMEOUT) }}
      run: |
        ${{ inputs.environment }} FLINK_DIR=`pwd`/build-target PROFILE="$PROFILE -Pgithub-actions" ./tools/azure-pipelines/uploading_watchdog.sh \
          flink-end-to-end-tests/run-nightly-tests.sh ${{ matrix.group }}
    - name: Upload Logs
      uses: actions/upload-artifact@v4
      if: ${{ failure() && steps.test-run.outputs.debug-files-output-dir != '' }}
      with:
        name: logs-e2e-${{ needs.compile.outputs.stringified-workflow-name }}-${{ github.run_number }}-${{ matrix.group }}-${{ steps.test-run.outputs.debug-files-name }}
        path: ${{ steps.test-run.outputs.debug-files-output-dir }}
    - name: Save Docker images to Cache
      if: ${{ !cancelled() && (failure() || !steps.docker-cache.cache.hit) }}
      run: ./tools/azure-pipelines/cache_docker_images.sh save
