name: swagger-api/swagger-codegen
on:
  workflow_dispatch:
    inputs:
      repoName:
        description: Name of the repo
        required: false
      patch:
        description: Base64 encoded patch content
        required: false
      command:
        description: Command to run
        required: false
      ref:
        description: The repo branch, tag, or commit SHA to checkout
        required: false
jobs:
  build-codegen:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        java:
        - 8
    steps:
    - uses: actions/checkout@v2
      with:
        repository: ${{ github.event.inputs.repoName }}
        ref: ${{ github.event.inputs.ref }}
    - uses: actions/setup-java@v1
      with:
        java-version: ${{ matrix.java }}
    - name: build codegen
      run: |
        mkdir codegen-cli

        echo "BUILDING latest"

        mvn -version

        mvn -q -B package -DskipTests -Dhttp.keepAlive=false -Dmaven.wagon.http.pool=false -Dmaven.wagon.httpconnectionManager.ttlSeconds=120 -Dmaven.wagon.http.retryHandler.count=3

        ls modules/swagger-codegen-cli/target/

        cp modules/swagger-codegen-cli/target/swagger-codegen-cli.jar codegen-cli


        mkdir python-v2-sample-test-config-files

        cp samples/client/petstore/python/tests -r python-v2-sample-test-config-files

        cp samples/client/petstore/python/Makefile python-v2-sample-test-config-files

        cp samples/client/petstore/python/pom.xml python-v2-sample-test-config-files

        cp samples/client/petstore/python/setup.cfg python-v2-sample-test-config-files

        cp samples/client/petstore/python/setup.cfg python-v2-sample-test-config-files

        cp samples/client/petstore/python/test_python2.sh python-v2-sample-test-config-files

        cp samples/client/petstore/python/test_python2_and_3.sh python-v2-sample-test-config-files
    - name: upload codegen cli
      uses: actions/upload-artifact@v2
      with:
        name: codegen-cli
        path: codegen-cli
    - name: Apply patch
      shell: bash
      run: |

                if [ -n "${{ github.event.inputs.patch }}" ]; then
                   echo "Patch input provided. Applying patch..."
                   echo "${{ github.event.inputs.patch }}" | base64 --decode | sed 's/\r$//'  > patch.diff
                   echo "Decoded patch content:"
                   cat patch.diff 
                   echo "Apply the patch:"
                   git apply patch.diff || {
                     echo "Failed to apply patch"
                     exit 1
                   }
                 else
                   echo "No patch input provided. Skipping patch application."
                 fi
                echo "Print git diff on local repo"
                git diff
    - name: Run custom command
      shell: bash
      run: |
         
                if [ -n "${{ github.event.inputs.command }}" ]; then
                   echo "Start running custom command"
                   echo "${{ github.event.inputs.command }}"
                   output=$(echo "${{ github.event.inputs.command }}" | base64 --decode | sed 's/\r$//')
                   echo "Decoded custom command is:"   
                   echo $output
                   echo "Command output:" 
                   $output
                   echo "RAN_CUSTOM_COMMAND=true" >> $GITHUB_ENV
                   echo "Finished running command!"
                fi
    - name: Exit if custom command was run
      if: env.RAN_CUSTOM_COMMAND == 'true'
      shell: bash
      run: |

                echo "Exiting job after custom command run"
                exit 1
    - name: upload python test cfg files (ces) (ces)
      uses: actions/upload-artifact@v2
      with:
        name: python-v2-sample-test-config-files
        path: python-v2-sample-test-config-files
  generate:
    needs: build-codegen
    runs-on: ubuntu-latest
    strategy:
      matrix:
        java:
        - 8
    outputs:
      generate_outcome: ${{ steps.outcome.outputs.generate_outcome }}
    steps:
    - uses: actions/checkout@v2
      with:
        repository: ${{ github.event.inputs.repoName }}
        ref: ${{ github.event.inputs.ref }}
    - uses: actions/setup-java@v1
      with:
        java-version: ${{ matrix.java }}
    - name: Download codegen cli
      uses: actions/download-artifact@v2
      with:
        name: codegen-cli
    - name: generate
      id: generate
      continue-on-error: true
      uses: ./.github/actions/generate
      with:
        language: python
        job-name: ${{ env.JOB_NAME }}
        spec-url: https://raw.githubusercontent.com/swagger-api/swagger-codegen/master/modules/swagger-codegen/src/test/resources/2_0/petstore-with-fake-endpoints-models-for-testing.yaml
        options: -DpackageName=petstore_api --library asyncio
    - id: outcome
      run: |
        echo "generate_outcome=${{ steps.generate.outcome }}" >> $GITHUB_OUTPUT

        echo ${{ steps.generate.outcome }} > generate_outcome_${{ env.JOB_NAME }}
    - name: upload generate outcome
      uses: actions/upload-artifact@v2
      with:
        name: ${{ env.JOB_NAME }}generate_outcome
        path: generate_outcome_${{ env.JOB_NAME }}
    - name: upload generate logs
      uses: actions/upload-artifact@v2
      with:
        name: ${{ env.JOB_NAME }}generate_logs
        path: ${{ steps.generate.outputs.logs }}
    - name: upload generated code
      if: contains(steps.generate.outcome, 'success')
      uses: actions/upload-artifact@v2
      with:
        name: ${{ env.JOB_NAME }}generated
        path: ${{ steps.generate.outputs.path }}
    env:
      JOB_NAME: python-asyncio-v2-sample
  build:
    needs: generate
    if: true
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version:
        - 3.x
    steps:
    - uses: actions/checkout@v2
      with:
        repository: ${{ github.event.inputs.repoName }}
        ref: ${{ github.event.inputs.ref }}
    - name: Download artifacts
      uses: actions/download-artifact@v2
      with:
        name: ${{ env.JOB_NAME }}generated
        path: generated/${{ env.JOB_NAME }}
    - name: Download logs
      uses: actions/download-artifact@v2
      with:
        name: ${{ env.JOB_NAME }}generate_logs
    - name: Setup python
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Apply patch
      shell: bash
      run: |

                if [ -n "${{ github.event.inputs.patch }}" ]; then
                   echo "Patch input provided. Applying patch..."
                   echo "${{ github.event.inputs.patch }}" | base64 --decode | sed 's/\r$//'  > patch.diff
                   echo "Decoded patch content:"
                   cat patch.diff 
                   echo "Apply the patch:"
                   git apply patch.diff || {
                     echo "Failed to apply patch"
                     exit 1
                   }
                 else
                   echo "No patch input provided. Skipping patch application."
                 fi
                echo "Print git diff on local repo"
                git diff
    - name: Run custom command
      shell: bash
      run: |
         
                if [ -n "${{ github.event.inputs.command }}" ]; then
                   echo "Start running custom command"
                   echo "${{ github.event.inputs.command }}"
                   output=$(echo "${{ github.event.inputs.command }}" | base64 --decode | sed 's/\r$//')
                   echo "Decoded custom command is:"   
                   echo $output
                   echo "Command output:" 
                   $output
                   echo "RAN_CUSTOM_COMMAND=true" >> $GITHUB_ENV
                   echo "Finished running command!"
                fi
    - name: Exit if custom command was run
      if: env.RAN_CUSTOM_COMMAND == 'true'
      shell: bash
      run: |

                echo "Exiting job after custom command run"
                exit 1
    - name: Download Python V2 test cfg files (ces) (ces)
      uses: actions/download-artifact@v2
      with:
        name: python-v2-sample-test-config-files
        path: generated/${{ env.JOB_NAME }}
    - name: build
      id: build
      uses: ./.github/actions/build
      continue-on-error: true
      with:
        path: generated/${{ env.JOB_NAME }}
        job-name: ${{ env.JOB_NAME }}
        build-commands: make test-all
    - id: outcome
      run: |
        echo "build_outcome=${{ steps.build.outcome }}" >> $GITHUB_OUTPUT

        echo ${{ steps.build.outcome }} > ${{ env.JOB_NAME }}build_outcome
    - name: upload build outcome
      uses: actions/upload-artifact@v2
      with:
        name: ${{ env.JOB_NAME }}build_outcome
        path: ${{ env.JOB_NAME }}build_outcome
    - name: upload logs
      uses: actions/upload-artifact@v2
      with:
        name: ${{ env.JOB_NAME }}logs
        path: ${{ steps.build.outputs.logs }}
    env:
      JOB_NAME: python-asyncio-v2-sample
