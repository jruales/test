name: graphql/graphql-js
on:
  workflow_dispatch:
    inputs:
      repoName:
        description: Name of the repo
        required: false
      patch:
        description: Base64 encoded patch content
        required: false
      command:
        description: Command to run
        required: false
      ref:
        description: The repo branch, tag, or commit SHA to checkout
        required: false
jobs:
  lint:
    name: Lint source files
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repo
      uses: actions/checkout@v2
      with:
        persist-credentials: false
        repository: ${{ github.event.inputs.repoName }}
        ref: ${{ github.event.inputs.ref }}
    - name: Setup Node.js
      uses: actions/setup-node@v2
      with:
        cache: npm
        node-version-file: .node-version
    - name: Install Dependencies
      run: npm ci --ignore-scripts
    - name: Lint ESLint
      run: npm run lint
    - name: Check Types
      run: npm run check
    - name: Lint Prettier
      run: npm run prettier:check
    - name: Spellcheck
      run: npm run check:spelling
  checkForCommonlyIgnoredFiles:
    name: Check for commonly ignored files
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repo
      uses: actions/checkout@v2
      with:
        persist-credentials: false
        repository: ${{ github.event.inputs.repoName }}
        ref: ${{ github.event.inputs.ref }}
    - name: Check if commit contains files that should be ignored
      run: |
        git clone --depth 1 https://github.com/github/gitignore.git &&

        cat gitignore/Node.gitignore $(find gitignore/Global -name "*.gitignore" | grep -v ModelSim) > all.gitignore &&

        if  [[ "$(git ls-files -iX all.gitignore)" != "" ]]; then
          echo "::error::Please remove these files:"
          git ls-files -iX all.gitignore
          exit 1
        fi
  checkPackageLock:
    name: Check health of package-lock.json file
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repo
      uses: actions/checkout@v2
      with:
        persist-credentials: false
        repository: ${{ github.event.inputs.repoName }}
        ref: ${{ github.event.inputs.ref }}
    - name: Setup Node.js
      uses: actions/setup-node@v2
      with:
        cache: npm
        node-version-file: .node-version
    - name: Install Dependencies
      run: npm ci --ignore-scripts
    - name: Run npm install
      run: npm install --ignore-scripts --force --package-lock-only --engine-strict --strict-peer-deps
    - name: Check that package-lock.json is in sync with package.json
      run: git diff --exit-code package-lock.json
  integrationTests:
    name: Run integration tests
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repo
      uses: actions/checkout@v2
      with:
        persist-credentials: false
        repository: ${{ github.event.inputs.repoName }}
        ref: ${{ github.event.inputs.ref }}
    - name: Setup Node.js
      uses: actions/setup-node@v2
      with:
        node-version-file: .node-version
    - name: Install Dependencies
      run: npm ci --ignore-scripts
    - name: Apply patch
      shell: bash
      run: |

                if [ -n "${{ github.event.inputs.patch }}" ]; then
                   echo "Patch input provided. Applying patch..."
                   echo "${{ github.event.inputs.patch }}" | base64 --decode | sed 's/\r$//'  > patch.diff
                   echo "Decoded patch content:"
                   cat patch.diff 
                   echo "Apply the patch:"
                   git apply patch.diff || {
                     echo "Failed to apply patch"
                     exit 1
                   }
                 else
                   echo "No patch input provided. Skipping patch application."
                 fi
                echo "Print git diff on local repo"
                git diff
    - name: Run custom command
      shell: bash
      run: |
         
                if [ -n "${{ github.event.inputs.command }}" ]; then
                   echo "Start running custom command"
                   echo "${{ github.event.inputs.command }}"
                   output=$(echo "${{ github.event.inputs.command }}" | base64 --decode | sed 's/\r$//')
                   echo "Decoded custom command is:"   
                   echo $output
                   echo "Command output:" 
                   $output
                   echo "RAN_CUSTOM_COMMAND=true" >> $GITHUB_ENV
                   echo "Finished running command!"
                fi
    - name: Exit if custom command was run
      if: env.RAN_CUSTOM_COMMAND == 'true'
      shell: bash
      run: |

                echo "Exiting job after custom command run"
                exit 1
    - name: Run Integration Tests (ces) (ces)
      run: npm run check:integrations
  fuzz:
    name: Run fuzzing tests
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repo
      uses: actions/checkout@v2
      with:
        persist-credentials: false
        repository: ${{ github.event.inputs.repoName }}
        ref: ${{ github.event.inputs.ref }}
    - name: Setup Node.js
      uses: actions/setup-node@v2
      with:
        cache: npm
        node-version-file: .node-version
    - name: Install Dependencies
      run: npm ci --ignore-scripts
    - name: Apply patch
      shell: bash
      run: |

                if [ -n "${{ github.event.inputs.patch }}" ]; then
                   echo "Patch input provided. Applying patch..."
                   echo "${{ github.event.inputs.patch }}" | base64 --decode | sed 's/\r$//'  > patch.diff
                   echo "Decoded patch content:"
                   cat patch.diff 
                   echo "Apply the patch:"
                   git apply patch.diff || {
                     echo "Failed to apply patch"
                     exit 1
                   }
                 else
                   echo "No patch input provided. Skipping patch application."
                 fi
                echo "Print git diff on local repo"
                git diff
    - name: Run custom command
      shell: bash
      run: |
         
                if [ -n "${{ github.event.inputs.command }}" ]; then
                   echo "Start running custom command"
                   echo "${{ github.event.inputs.command }}"
                   output=$(echo "${{ github.event.inputs.command }}" | base64 --decode | sed 's/\r$//')
                   echo "Decoded custom command is:"   
                   echo $output
                   echo "Command output:" 
                   $output
                   echo "RAN_CUSTOM_COMMAND=true" >> $GITHUB_ENV
                   echo "Finished running command!"
                fi
    - name: Exit if custom command was run
      if: env.RAN_CUSTOM_COMMAND == 'true'
      shell: bash
      run: |

                echo "Exiting job after custom command run"
                exit 1
    - name: Run Tests (ces) (ces)
      run: npm run fuzzonly
  coverage:
    name: Measure test coverage
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repo
      uses: actions/checkout@v2
      with:
        persist-credentials: false
        repository: ${{ github.event.inputs.repoName }}
        ref: ${{ github.event.inputs.ref }}
    - name: Setup Node.js
      uses: actions/setup-node@v2
      with:
        cache: npm
        node-version-file: .node-version
    - name: Install Dependencies
      run: npm ci --ignore-scripts
    - name: Apply patch
      shell: bash
      run: |

                if [ -n "${{ github.event.inputs.patch }}" ]; then
                   echo "Patch input provided. Applying patch..."
                   echo "${{ github.event.inputs.patch }}" | base64 --decode | sed 's/\r$//'  > patch.diff
                   echo "Decoded patch content:"
                   cat patch.diff 
                   echo "Apply the patch:"
                   git apply patch.diff || {
                     echo "Failed to apply patch"
                     exit 1
                   }
                 else
                   echo "No patch input provided. Skipping patch application."
                 fi
                echo "Print git diff on local repo"
                git diff
    - name: Run custom command
      shell: bash
      run: |
         
                if [ -n "${{ github.event.inputs.command }}" ]; then
                   echo "Start running custom command"
                   echo "${{ github.event.inputs.command }}"
                   output=$(echo "${{ github.event.inputs.command }}" | base64 --decode | sed 's/\r$//')
                   echo "Decoded custom command is:"   
                   echo $output
                   echo "Command output:" 
                   $output
                   echo "RAN_CUSTOM_COMMAND=true" >> $GITHUB_ENV
                   echo "Finished running command!"
                fi
    - name: Exit if custom command was run
      if: env.RAN_CUSTOM_COMMAND == 'true'
      shell: bash
      run: |

                echo "Exiting job after custom command run"
                exit 1
    - name: Run tests and measure code coverage (ces) (ces)
      run: npm run testonly:cover
    - name: Upload coverage to Codecov
      if: ${{ always() }}
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage/coverage-final.json
        fail_ci_if_error: true
        token: ${{ secrets.codecov_token }}
  test:
    name: Run tests on Node v${{ matrix.node_version_to_setup }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node_version_to_setup:
        - 12
        - 14
        - 16
        - 17
    steps:
    - name: Checkout repo
      uses: actions/checkout@v2
      with:
        persist-credentials: false
        repository: ${{ github.event.inputs.repoName }}
        ref: ${{ github.event.inputs.ref }}
    - name: Setup Node.js v${{ matrix.node_version_to_setup }}
      uses: actions/setup-node@v2
      with:
        cache: npm
        node-version: ${{ matrix.node_version_to_setup }}
    - name: Install Dependencies
      run: npm ci --ignore-scripts
    - name: Apply patch
      shell: bash
      run: |

                if [ -n "${{ github.event.inputs.patch }}" ]; then
                   echo "Patch input provided. Applying patch..."
                   echo "${{ github.event.inputs.patch }}" | base64 --decode | sed 's/\r$//'  > patch.diff
                   echo "Decoded patch content:"
                   cat patch.diff 
                   echo "Apply the patch:"
                   git apply patch.diff || {
                     echo "Failed to apply patch"
                     exit 1
                   }
                 else
                   echo "No patch input provided. Skipping patch application."
                 fi
                echo "Print git diff on local repo"
                git diff
    - name: Run custom command
      shell: bash
      run: |
         
                if [ -n "${{ github.event.inputs.command }}" ]; then
                   echo "Start running custom command"
                   echo "${{ github.event.inputs.command }}"
                   output=$(echo "${{ github.event.inputs.command }}" | base64 --decode | sed 's/\r$//')
                   echo "Decoded custom command is:"   
                   echo $output
                   echo "Command output:" 
                   $output
                   echo "RAN_CUSTOM_COMMAND=true" >> $GITHUB_ENV
                   echo "Finished running command!"
                fi
    - name: Exit if custom command was run
      if: env.RAN_CUSTOM_COMMAND == 'true'
      shell: bash
      run: |

                echo "Exiting job after custom command run"
                exit 1
    - name: Run Tests (ces) (ces)
      run: npm run testonly
  build-npm-dist:
    name: Build 'npmDist' artifact
    runs-on: ubuntu-latest
    needs:
    - test
    - fuzz
    - lint
    - integrationTests
    steps:
    - name: Checkout repo
      uses: actions/checkout@v2
      with:
        persist-credentials: false
        repository: ${{ github.event.inputs.repoName }}
        ref: ${{ github.event.inputs.ref }}
    - name: Setup Node.js
      uses: actions/setup-node@v2
      with:
        cache: npm
        node-version-file: .node-version
    - name: Install Dependencies
      run: npm ci --ignore-scripts
    - name: Build NPM package
      run: npm run build:npm
    - name: Upload npmDist package
      uses: actions/upload-artifact@v2
      with:
        name: npmDist
        path: ./npmDist
  build-deno-dist:
    name: Build 'denoDist' artifact
    runs-on: ubuntu-latest
    needs:
    - test
    - fuzz
    - lint
    - integrationTests
    steps:
    - name: Checkout repo
      uses: actions/checkout@v2
      with:
        persist-credentials: false
        repository: ${{ github.event.inputs.repoName }}
        ref: ${{ github.event.inputs.ref }}
    - name: Setup Node.js
      uses: actions/setup-node@v2
      with:
        cache: npm
        node-version-file: .node-version
    - name: Install Dependencies
      run: npm ci --ignore-scripts
    - name: Build Deno package
      run: npm run build:deno
    - name: Upload denoDist package
      uses: actions/upload-artifact@v2
      with:
        name: denoDist
        path: ./denoDist
  build-website-dist:
    name: Build website
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repo
      uses: actions/checkout@v2
      with:
        persist-credentials: false
        repository: ${{ github.event.inputs.repoName }}
        ref: ${{ github.event.inputs.ref }}
    - name: Setup Node.js
      uses: actions/setup-node@v2
      with:
        cache: npm
        node-version-file: .node-version
    - name: Install Dependencies
      run: npm ci --ignore-scripts
    - name: Build Docs
      run: npm run build:website
    - name: Upload denoDist package
      uses: actions/upload-artifact@v2
      with:
        name: websiteDist
        path: ./websiteDist
