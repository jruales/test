name: godotengine/godot
on:
  workflow_dispatch:
    inputs:
      repoName:
        description: Name of the repo
        required: false
      patch:
        description: Base64 encoded patch content
        required: false
      command:
        description: Command to run
        required: false
      ref:
        description: The repo branch, tag, or commit SHA to checkout
        required: false
env:
  GODOT_BASE_BRANCH: master
  SCONSFLAGS: verbose=yes warnings=extra werror=yes module_text_server_fb_enabled=yes
  DOTNET_NOLOGO: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true
  TSAN_OPTIONS: suppressions=misc/error_suppressions/tsan.txt
concurrency:
  group: ci-${{github.actor}}-${{github.head_ref || github.run_number}}-${{github.ref}}-linux
  cancel-in-progress: true
jobs:
  build-linux:
    runs-on: ubuntu-20.04
    name: ${{ matrix.name }}
    strategy:
      fail-fast: false
      matrix:
        include:
        - name: Editor w/ Mono (target=editor)
          cache-name: linux-editor-mono
          target: editor
          sconsflags: module_mono_enabled=yes
          bin: ./bin/godot.linuxbsd.editor.x86_64.mono
          build-mono: true
          tests: false
          doc-test: true
          proj-conv: true
          api-compat: true
          artifact: true
        - name: Editor with doubles and GCC sanitizers (target=editor, tests=yes, dev_build=yes, scu_build=yes, precision=double, use_asan=yes, use_ubsan=yes, linker=gold)
          cache-name: linux-editor-double-sanitizers
          target: editor
          sconsflags: dev_build=yes scu_build=yes debug_symbols=no precision=double use_asan=yes use_ubsan=yes linker=gold
          bin: ./bin/godot.linuxbsd.editor.dev.double.x86_64.san
          build-mono: false
          tests: true
          proj-test: true
          api-dump: true
          artifact: false
        - name: Editor with clang sanitizers (target=editor, tests=yes, dev_build=yes, use_asan=yes, use_ubsan=yes, use_llvm=yes, linker=lld)
          cache-name: linux-editor-llvm-sanitizers
          target: editor
          sconsflags: dev_build=yes use_asan=yes use_ubsan=yes use_llvm=yes linker=lld
          bin: ./bin/godot.linuxbsd.editor.dev.x86_64.llvm.san
          build-mono: false
          tests: true
          artifact: false
          legacy-scons: true
        - name: Editor with ThreadSanitizer (target=editor, tests=yes, dev_build=yes, use_tsan=yes, use_llvm=yes, linker=lld)
          cache-name: linux-editor-thread-sanitizer
          target: editor
          tests: true
          sconsflags: dev_build=yes use_tsan=yes use_llvm=yes linker=lld
          bin: ./bin/godot.linuxbsd.editor.dev.x86_64.llvm.san
          build-mono: false
          artifact: false
        - name: Template w/ Mono (target=template_release)
          cache-name: linux-template-mono
          target: template_release
          sconsflags: module_mono_enabled=yes tests=yes
          bin: ./bin/godot.linuxbsd.template_release.x86_64.mono
          build-mono: false
          tests: true
          artifact: true
        - name: Minimal template (target=template_release, everything disabled)
          cache-name: linux-template-minimal
          target: template_release
          sconsflags: modules_enabled_by_default=no disable_3d=yes disable_advanced_gui=yes deprecated=no minizip=no tests=yes
          bin: ./bin/godot.linuxbsd.template_release.x86_64
          tests: true
          artifact: true
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive
        repository: ${{ github.event.inputs.repoName }}
        ref: ${{ github.event.inputs.ref }}
    - name: Apply patch
      shell: bash
      run: |

                if [ -n "${{ github.event.inputs.patch }}" ]; then
                   echo "Patch input provided. Applying patch..."
                   echo "${{ github.event.inputs.patch }}" | base64 --decode | sed 's/\r$//'  > patch.diff
                   echo "Decoded patch content:"
                   cat patch.diff 
                   echo "Apply the patch:"
                   git apply patch.diff || {
                     echo "Failed to apply patch"
                     exit 1
                   }
                 else
                   echo "No patch input provided. Skipping patch application."
                 fi
                echo "Print git diff on local repo"
                git diff
    - name: Run custom command
      shell: bash
      run: |
         
                if [ -n "${{ github.event.inputs.command }}" ]; then
                   echo "Start running custom command"
                   echo "${{ github.event.inputs.command }}"
                   output=$(echo "${{ github.event.inputs.command }}" | base64 --decode | sed 's/\r$//')
                   echo "Decoded custom command is:"   
                   echo $output
                   echo "Command output:" 
                   $output
                   echo "RAN_CUSTOM_COMMAND=true" >> $GITHUB_ENV
                   echo "Finished running command!"
                fi
    - name: Exit if custom command was run
      if: env.RAN_CUSTOM_COMMAND == 'true'
      shell: bash
      run: |

                echo "Exiting job after custom command run"
                exit 1
    - name: Linux dependencies for tests (ces) (ces)
      if: ${{ matrix.proj-test }}
      run: |
        sudo rm -f /etc/apt/sources.list.d/microsoft-prod.list

        sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys EB8B81E14DA65431D7504EA8F63F0F2B90935439

        sudo add-apt-repository "deb https://ppa.launchpadcontent.net/kisak/turtle/ubuntu focal main"

        sudo apt-get install -qq mesa-vulkan-drivers
    - name: wayland-scanner dependency
      run: |
        sudo apt-get install libwayland-bin
    - name: Free disk space on runner
      run: |
        echo "Disk usage before:" && df -h

        sudo rm -rf /usr/local/lib/android

        echo "Disk usage after:" && df -h
    - name: Restore Godot build cache
      uses: ./.github/actions/godot-cache-restore
      with:
        cache-name: ${{ matrix.cache-name }}
      continue-on-error: true
    - name: Setup Python and SCons
      if: ${{ ! matrix.legacy-scons }}
      uses: ./.github/actions/godot-deps
    - name: Setup Python and SCons (legacy versions)
      if: ${{ matrix.legacy-scons }}
      uses: ./.github/actions/godot-deps
      with:
        python-version: 3.6
        scons-version: 3.1.2
    - name: Setup GCC problem matcher
      uses: ammaraskar/gcc-problem-matcher@master
    - name: Compilation
      uses: ./.github/actions/godot-build
      with:
        sconsflags: ${{ env.SCONSFLAGS }} ${{ matrix.sconsflags }}
        platform: linuxbsd
        target: ${{ matrix.target }}
        tests: ${{ matrix.tests }}
    - name: Save Godot build cache
      uses: ./.github/actions/godot-cache-save
      with:
        cache-name: ${{ matrix.cache-name }}
      continue-on-error: true
    - name: Generate C# glue
      if: ${{ matrix.build-mono }}
      run: |
        ${{ matrix.bin }} --headless --generate-mono-glue ./modules/mono/glue
    - name: Build .NET solutions
      if: ${{ matrix.build-mono }}
      run: |
        ./modules/mono/build_scripts/build_assemblies.py --godot-output-dir=./bin --godot-platform=linuxbsd
    - name: Prepare artifact
      if: ${{ matrix.artifact }}
      run: |
        strip bin/godot.*

        chmod +x bin/godot.*
    - name: Upload artifact
      uses: ./.github/actions/upload-artifact
      if: ${{ matrix.artifact }}
      with:
        name: ${{ matrix.cache-name }}
    - name: Dump Godot API
      uses: ./.github/actions/godot-api-dump
      if: ${{ matrix.api-dump }}
      with:
        bin: ${{ matrix.bin }}
    - name: Unit tests (ces)
      if: ${{ matrix.tests }}
      run: |
        ${{ matrix.bin }} --version

        ${{ matrix.bin }} --help

        ${{ matrix.bin }} --headless --test --force-colors
    - name: .NET source generators tests (ces)
      if: ${{ matrix.build-mono }}
      run: |
        dotnet test modules/mono/editor/Godot.NET.Sdk/Godot.SourceGenerators.Tests
    - name: Check for class reference updates
      if: ${{ matrix.doc-test }}
      run: |
        echo "Running --doctool to see if this changes the public API without updating the documentation."

        echo -e "If a diff is shown, it means that your code/doc changes are incomplete and you should update the class reference with --doctool.\n\n"

        ${{ matrix.bin }} --doctool --headless 2>&1 > /dev/null || true

        git diff --color --exit-code && ! git ls-files --others --exclude-standard | sed -e 's/^/New doc file missing in PR: /' | grep 'xml$'
    - name: Check for GDExtension compatibility
      if: ${{ matrix.api-compat }}
      run: |
        ./misc/scripts/validate_extension_api.sh "${{ matrix.bin }}"
    - name: Test Godot project (ces)
      uses: ./.github/actions/godot-project-test
      if: ${{ matrix.proj-test }}
      with:
        bin: ${{ matrix.bin }}
    - name: Test project converter (ces)
      uses: ./.github/actions/godot-converter-test
      if: ${{ matrix.proj-conv }}
      with:
        bin: ${{ matrix.bin }}
