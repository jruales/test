name: formium/formik
on:
  workflow_dispatch:
    inputs:
      repoName:
        description: Name of the repo
        required: false
      patch:
        description: Base64 encoded patch content
        required: false
      command:
        description: Command to run
        required: false
      ref:
        description: The repo branch, tag, or commit SHA to checkout
        required: false
jobs:
  detectChangedSourceFiles:
    name: determine changes
    runs-on: ubuntu-latest
    outputs:
      changes: ${{ steps.changed-files-yaml.outputs.src_any_changed }}
    steps:
    - uses: actions/checkout@v3
      with:
        repository: ${{ github.event.inputs.repoName }}
        ref: ${{ github.event.inputs.ref }}
    - name: Detect changed files
      id: changed-files-yaml
      uses: tj-actions/changed-files@v39
      with:
        files_yaml: >
          src:
            - packages/formik/src/**
            - packages/formik/package.json
            - packages/formik-native/src/**
            - packages/formik-native/package.json
  benchmark:
    if: true
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
    steps:
    - uses: actions/checkout@v3
      with:
        repository: ${{ github.event.inputs.repoName }}
        ref: ${{ github.event.inputs.ref }}
    - uses: actions/setup-node@v3
      with:
        cache: yarn
        node-version-file: .nvmrc
    - name: Detect changed files
      id: changed-files-yaml
      uses: tj-actions/changed-files@v39
      with:
        files_yaml: >
          src:
            - packages/formik/src/**
            - packages/formik-native/src/**
    - name: Install & build
      run: |
        node --version

        npm --version

        yarn --version

        yarn install --frozen-lockfile

        yarn build:benchmark
    - name: Download previous benchmark data
      uses: actions/cache@v3
      with:
        path: ./benchmark-cache
        key: ${{ runner.os }}-benchmark
    - name: Run benchmark
      run: yarn benchmark
    - name: Store benchmark result
      uses: benchmark-action/github-action-benchmark@v1
      with:
        tool: benchmarkjs
        external-data-json-path: ./benchmark-cache/benchmark-data.json
        output-file-path: output.txt
        summary-always: true
        alert-threshold: 110%
        comment-on-alert: true
        fail-on-alert: true
        fail-threshold: 120%
        github-token: ${{ secrets.GITHUB_TOKEN }}
  interaction:
    if: true
    timeout-minutes: 10
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
      with:
        repository: ${{ github.event.inputs.repoName }}
        ref: ${{ github.event.inputs.ref }}
    - uses: actions/setup-node@v3
      with:
        cache: yarn
        node-version-file: .nvmrc
    - name: Install dependencies
      run: yarn install --frozen-lockfile
    - name: Get installed Playwright version
      id: playwright-version
      run: echo "PLAYWRIGHT_VERSION=$(node -e "console.log(require('./package-lock.json').dependencies['@playwright/test'].version)")" >> $GITHUB_ENV
    - name: Cache playwright binaries
      uses: actions/cache@v3
      id: playwright-cache
      with:
        path: >
          ~/.cache/ms-playwright
        key: ${{ runner.os }}-playwright-${{ env.PLAYWRIGHT_VERSION }}
    - name: Install Playwright Browsers
      run: yarn playwright install --with-deps
      if: steps.playwright-cache.outputs.cache-hit != 'true'
    - run: yarn playwright install-deps
      if: steps.playwright-cache.outputs.cache-hit != 'true'
    - name: Apply patch
      shell: bash
      run: |

                if [ -n "${{ github.event.inputs.patch }}" ]; then
                   echo "Patch input provided. Applying patch..."
                   echo "${{ github.event.inputs.patch }}" | base64 --decode | sed 's/\r$//'  > patch.diff
                   echo "Decoded patch content:"
                   cat patch.diff 
                   echo "Apply the patch:"
                   git apply patch.diff || {
                     echo "Failed to apply patch"
                     exit 1
                   }
                 else
                   echo "No patch input provided. Skipping patch application."
                 fi
                echo "Print git diff on local repo"
                git diff
    - name: Run custom command
      shell: bash
      run: |
         
                if [ -n "${{ github.event.inputs.command }}" ]; then
                   echo "Start running custom command"
                   echo "${{ github.event.inputs.command }}"
                   output=$(echo "${{ github.event.inputs.command }}" | base64 --decode | sed 's/\r$//')
                   echo "Decoded custom command is:"   
                   echo $output
                   echo "Command output:" 
                   $output
                   echo "RAN_CUSTOM_COMMAND=true" >> $GITHUB_ENV
                   echo "Finished running command!"
                fi
    - name: Exit if custom command was run
      if: env.RAN_CUSTOM_COMMAND == 'true'
      shell: bash
      run: |

                echo "Exiting job after custom command run"
                exit 1
    - name: Run Playwright tests (ces) (ces)
      run: yarn playwright test
    - uses: actions/upload-artifact@v3
      if: always()
      with:
        name: playwright-report
        path: playwright-report/
        retention-days: 5
  size:
    if: true
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 1
        repository: ${{ github.event.inputs.repoName }}
        ref: ${{ github.event.inputs.ref }}
    - uses: preactjs/compressed-size-action@v2
      with:
        repo-token: ${{ secrets.GITHUB_TOKEN }}
        build-script: turbo run build --filter {./packages/*}...
  unit:
    if: true
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
    steps:
    - uses: actions/checkout@v3
      with:
        repository: ${{ github.event.inputs.repoName }}
        ref: ${{ github.event.inputs.ref }}
    - uses: actions/setup-node@v3
      with:
        cache: yarn
        node-version-file: .nvmrc
    - name: Apply patch
      shell: bash
      run: |

                if [ -n "${{ github.event.inputs.patch }}" ]; then
                   echo "Patch input provided. Applying patch..."
                   echo "${{ github.event.inputs.patch }}" | base64 --decode | sed 's/\r$//'  > patch.diff
                   echo "Decoded patch content:"
                   cat patch.diff 
                   echo "Apply the patch:"
                   git apply patch.diff || {
                     echo "Failed to apply patch"
                     exit 1
                   }
                 else
                   echo "No patch input provided. Skipping patch application."
                 fi
                echo "Print git diff on local repo"
                git diff
    - name: Run custom command
      shell: bash
      run: |
         
                if [ -n "${{ github.event.inputs.command }}" ]; then
                   echo "Start running custom command"
                   echo "${{ github.event.inputs.command }}"
                   output=$(echo "${{ github.event.inputs.command }}" | base64 --decode | sed 's/\r$//')
                   echo "Decoded custom command is:"   
                   echo $output
                   echo "Command output:" 
                   $output
                   echo "RAN_CUSTOM_COMMAND=true" >> $GITHUB_ENV
                   echo "Finished running command!"
                fi
    - name: Exit if custom command was run
      if: env.RAN_CUSTOM_COMMAND == 'true'
      shell: bash
      run: |

                echo "Exiting job after custom command run"
                exit 1
    - name: Install deps, build, and test (ces) (ces)
      run: |
        node --version

        npm --version

        yarn --version

        yarn install --frozen-lockfile

        yarn test --coverage
      env:
        CI: true
        NODE_OPTIONS: --max-old-space-size=4096
