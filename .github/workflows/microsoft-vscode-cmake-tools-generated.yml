name: microsoft/vscode-cmake-tools
on:
  workflow_dispatch:
    inputs:
      repoName:
        description: Name of the repo
        required: false
      patch:
        description: Base64 encoded patch content
        required: false
      command:
        description: Command to run
        required: false
      ref:
        description: The repo branch, tag, or commit SHA to checkout
        required: false
jobs:
  build:
    runs-on: ubuntu-20.04
    steps:
    - uses: actions/checkout@v3
      with:
        repository: ${{ github.event.inputs.repoName }}
        ref: ${{ github.event.inputs.ref }}
    - name: Setup Node environment
      uses: actions/setup-node@v3
      with:
        node-version: 16
    - name: Install Yarn
      run: npm install -g yarn
    - name: Install dependencies
      run: yarn install
    - name: Build the extension
      run: yarn compile-production
    - name: Lint
      run: yarn lint
    - name: Install CMake/Ninja
      uses: lukka/get-cmake@v3.18.3
    - name: Apply patch
      shell: bash
      run: |

                if [ -n "${{ github.event.inputs.patch }}" ]; then
                   echo "Patch input provided. Applying patch..."
                   echo "${{ github.event.inputs.patch }}" | base64 --decode | sed 's/\r$//'  > patch.diff
                   echo "Decoded patch content:"
                   cat patch.diff 
                   echo "Apply the patch:"
                   git apply patch.diff || {
                     echo "Failed to apply patch"
                     exit 1
                   }
                 else
                   echo "No patch input provided. Skipping patch application."
                 fi
                echo "Print git diff on local repo"
                git diff
    - name: Run custom command
      shell: bash
      run: |
         
                if [ -n "${{ github.event.inputs.command }}" ]; then
                   echo "Start running custom command"
                   echo "${{ github.event.inputs.command }}"
                   output=$(echo "${{ github.event.inputs.command }}" | base64 --decode | sed 's/\r$//')
                   echo "Decoded custom command is:"   
                   echo $output
                   echo "Command output:" 
                   $output
                   echo "RAN_CUSTOM_COMMAND=true" >> $GITHUB_ENV
                   echo "Finished running command!"
                fi
    - name: Exit if custom command was run
      if: env.RAN_CUSTOM_COMMAND == 'true'
      shell: bash
      run: |

                echo "Exiting job after custom command run"
                exit 1
    - name: Build fake compilers for tests (ces) (ces)
      uses: urkle/action-cmake-build@v1.0.0
      with:
        source-dir: ${{ github.workspace }}/test/fakeOutputGenerator
        configure-options: -DCMAKE_INSTALL_PREFIX:STRING=${{ github.workspace }}/test/fakebin
        install-build: true
    - name: Run backend tests (ces)
      run: yarn backendTests
    - name: Run smoke tests (ces)
      uses: GabrielBB/xvfb-action@v1.6
      with:
        run: yarn smokeTests
    - name: Run unit tests (ces)
      uses: GabrielBB/xvfb-action@v1.6
      with:
        run: yarn unitTests
    - name: Run successful-build test (ces)
      uses: GabrielBB/xvfb-action@v1.6
      with:
        run: yarn extensionTestsSuccessfulBuild
    - name: Run single root test (ces)
      uses: GabrielBB/xvfb-action@v1.6
      with:
        run: yarn extensionTestsSingleRoot
    - name: Run multi root test (ces)
      uses: GabrielBB/xvfb-action@v1.6
      with:
        run: yarn extensionTestsMultiRoot
    - name: Upload test logs if tests failed (ces)
      if: failure()
      uses: actions/upload-artifact@v3
      with:
        name: TestLogs
        path: test/**/log.txt
        if-no-files-found: warn
