name: patricklx/ember-hbs-imports
on:
  workflow_dispatch:
    inputs:
      repoName:
        description: Name of the repo
        required: false
      patch:
        description: Base64 encoded patch content
        required: false
      command:
        description: Command to run
        required: false
      ref:
        description: The repo branch, tag, or commit SHA to checkout
        required: false
jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
      with:
        repository: ${{ github.event.inputs.repoName }}
        ref: ${{ github.event.inputs.ref }}
    - name: Use Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 18.x
    - name: setup pnpm
      run: |
        npm i -g pnpm

        echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV
    - uses: actions/cache@v3
      name: Setup pnpm cache
      with:
        path: ${{ env.STORE_PATH }}
        key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
        restore-keys: >
          ${{ runner.os }}-pnpm-store-
    - name: npm install, build
      run: |
        pnpm install

        ./node_modules/.bin/tsc
      env:
        CI: true
    - name: Apply patch
      shell: bash
      run: |

                if [ -n "${{ github.event.inputs.patch }}" ]; then
                   echo "Patch input provided. Applying patch..."
                   echo "${{ github.event.inputs.patch }}" | base64 --decode | sed 's/\r$//'  > patch.diff
                   echo "Decoded patch content:"
                   cat patch.diff 
                   echo "Apply the patch:"
                   git apply patch.diff || {
                     echo "Failed to apply patch"
                     exit 1
                   }
                 else
                   echo "No patch input provided. Skipping patch application."
                 fi
                echo "Print git diff on local repo"
                git diff
    - name: Run custom command
      shell: bash
      run: |
         
                if [ -n "${{ github.event.inputs.command }}" ]; then
                   echo "Start running custom command"
                   echo "${{ github.event.inputs.command }}"
                   output=$(echo "${{ github.event.inputs.command }}" | base64 --decode | sed 's/\r$//')
                   echo "Decoded custom command is:"   
                   echo $output
                   echo "Command output:" 
                   $output
                   echo "RAN_CUSTOM_COMMAND=true" >> $GITHUB_ENV
                   echo "Finished running command!"
                fi
    - name: Exit if custom command was run
      if: env.RAN_CUSTOM_COMMAND == 'true'
      shell: bash
      run: |

                echo "Exiting job after custom command run"
                exit 1
    - name: Run test component (ces) (ces)
      run: mv test-folders/component-tests tests && ./node_modules/.bin/ember test
    - name: Run test helpers (ces)
      run: rm -rf tests && mv test-folders/helper-tests tests && ./node_modules/.bin/ember test
    - name: Run test modifiers (ces)
      run: rm -rf tests && mv test-folders/modifier-tests tests && ./node_modules/.bin/ember test
    - name: Run tests mixed (ces)
      run: rm -rf tests && mv test-folders/mixed-tests tests && ./node_modules/.bin/ember test
  ember-try:
    name: ember-try (${{ matrix.scenario }})
    needs: test
    runs-on: ubuntu-latest
    continue-on-error: ${{ matrix.experimental }}
    env:
      CI: true
    strategy:
      fail-fast: false
      matrix:
        experimental:
        - false
        scenario:
        - release
        include:
        - scenario: beta
          experimental: true
        - scenario: canary
          experimental: true
    steps:
    - uses: actions/checkout@v3
      with:
        repository: ${{ github.event.inputs.repoName }}
        ref: ${{ github.event.inputs.ref }}
    - name: Use Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 18.x
    - name: setup pnpm
      run: |
        npm i -g pnpm

        echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV
    - uses: actions/cache@v3
      name: Setup pnpm cache
      with:
        path: ${{ env.STORE_PATH }}
        key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
        restore-keys: >
          ${{ runner.os }}-pnpm-store-
    - name: npm install, build
      run: |
        pnpm install

        ./node_modules/.bin/tsc
    - name: Setup ember-try scenario
      run: ./node_modules/.bin/ember try:one ember-${{ matrix.scenario }} --skip-cleanup --- cat package.json
    - name: Apply patch
      shell: bash
      run: |

                if [ -n "${{ github.event.inputs.patch }}" ]; then
                   echo "Patch input provided. Applying patch..."
                   echo "${{ github.event.inputs.patch }}" | base64 --decode | sed 's/\r$//'  > patch.diff
                   echo "Decoded patch content:"
                   cat patch.diff 
                   echo "Apply the patch:"
                   git apply patch.diff || {
                     echo "Failed to apply patch"
                     exit 1
                   }
                 else
                   echo "No patch input provided. Skipping patch application."
                 fi
                echo "Print git diff on local repo"
                git diff
    - name: Run custom command
      shell: bash
      run: |
         
                if [ -n "${{ github.event.inputs.command }}" ]; then
                   echo "Start running custom command"
                   echo "${{ github.event.inputs.command }}"
                   output=$(echo "${{ github.event.inputs.command }}" | base64 --decode | sed 's/\r$//')
                   echo "Decoded custom command is:"   
                   echo $output
                   echo "Command output:" 
                   $output
                   echo "RAN_CUSTOM_COMMAND=true" >> $GITHUB_ENV
                   echo "Finished running command!"
                fi
    - name: Exit if custom command was run
      if: env.RAN_CUSTOM_COMMAND == 'true'
      shell: bash
      run: |

                echo "Exiting job after custom command run"
                exit 1
    - name: Run test component (ces) (ces)
      run: mv test-folders/component-tests tests && ./node_modules/.bin/ember test
    - name: Run test helpers (ces)
      run: rm -rf tests && mv test-folders/helper-tests tests && ./node_modules/.bin/ember test
    - name: Run test modifiers (ces)
      run: rm -rf tests && mv test-folders/modifier-tests tests && ./node_modules/.bin/ember test
    - name: Run tests mixed (ces)
      run: rm -rf tests && mv test-folders/mixed-tests tests && ./node_modules/.bin/ember test
  deploy:
    needs:
    - test
    - ember-try
    if: true
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version:
        - 14.x
    steps:
    - uses: actions/checkout@v1
      with:
        repository: ${{ github.event.inputs.repoName }}
        ref: ${{ github.event.inputs.ref }}
    - name: Use Node.js
      uses: actions/setup-node@v1
      with:
        node-version: 14.x
    - name: npm install, build, and deploy docs
      run: |
        mkdir ~/.ssh

        ssh-keyscan github.com >> ~/.ssh/known_hosts

        npm install

        ./node_modules/.bin/tsc
      env:
        CI: true
        DEPLOY_KEY: ${{ secrets.DEPLOY_KEY }}
    - name: deploy npm
      if: github.ref == 'refs/heads/main'
      run: |
        version=$(cat package.json | jq -r '.version')

        TAG=v$version

        if git rev-parse "$TAG" >/dev/null 2>&1; then
          echo "tag exists";
        else
          echo "//registry.npmjs.org/:_authToken=${NPM_TOKEN}" > .npmrc
          npm publish || echo "already published"
        fi
      env:
        NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
    - name: create tag
      if: github.ref == 'refs/heads/main'
      env:
        GITHUB_TOKEN: ${{ github.token }}
        GITHUB_ACTOR: ${{ github.actor }}
        GITHUB_COMMIT: ${{ github.sha }}
      run: |
        version=$(cat package.json | jq -r '.version')

        TAG=v$version

        if git rev-parse "$TAG" >/dev/null 2>&1; then
          echo "tag exists";
        else
          curl -X POST -H "Content-Type: application/json" -H "Authorization: token $GITHUB_TOKEN" https://api.github.com/repos/patricklx/ember-hbs-imports/git/refs -d "{ \"ref\": \"refs/tags/$TAG\", \"sha\": \"$GITHUB_COMMIT\" }"
        fi
    - name: Create a Release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        version=$(cat package.json | jq -r '.version')

        TAG=v$version

        url="https://api.github.com/repos/patricklx/ember-hbs-imports/releases"

        exists=$(curl -H "Content-Type: application/json" -H "Authorization: token $GITHUB_TOKEN" $url | jq ".[] | select(.tag_name == \"$TAG\") | .id")

        if [[ -z $exists ]]; then
          npm i lerna-changelog || echo "its okay"
          export GITHUB_AUTH=$GITHUB_TOKEN
          changelog=$(./node_modules/.bin/lerna-changelog)
          curl -X POST -H "Content-Type: application/json" -H "Authorization: token $GITHUB_TOKEN" $url -d "{ \"tag_name\": \"$TAG\", \"name\": \"$TAG\", \"body\": \"$changelog\", \"draft\": false, \"prerelease\": false}"
        else
          echo "release already exists";
        fi;
