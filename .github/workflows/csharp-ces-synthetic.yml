name: Code Execution - synthetic - dotnet

on:
   workflow_dispatch:
    inputs:
      test:
        description: 'Base64 encoded JSON blob of test files'
        required: false
        default: ''
      source:
        description: 'Base64 encoded JSON blob of files to be tested'
        required: false
        default: ''

jobs:
  run-CodeSnippet:
    runs-on: ubuntu-latest
    container:
      #image: mcr.microsoft.com/vscode/devcontainers/universal:2-linux  # Specify your container image
      image: mcr.microsoft.com/vscode/devcontainers/dotnet:8.0  # Specify your container image
      options: --privileged  # Optional: Use if your container needs privileged mode

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      # Setting up Python because the default Python 3.11 installation within the container image was having
      # some issues (couldn't import the built-in module 'json', for some reason).
      #
      # Note that both the `python` and `python3` commands will invoke the same Python version installed in this step.
      - uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      # Decode the source files and test files and save them to the source/ and test/ folder
      
      - name: Unpack source and test files
        shell: bash
        run: |
              # Write a Python script to expand base 64 encoded JSON file system
              # into individual files in a "bin" directory.
              SOURCE="${{ github.event.inputs.source }}"
              TEST="${{ github.event.inputs.test }}"

              cat << 'EOF' > fileSystemExpansion.py
              import sys
              import os
              import base64
              import json

              def main():
                  output_dir = sys.argv[1]
                  encoded_json = sys.argv[2]
                  decoded_json = base64.b64decode(encoded_json).decode('utf-8')
                  file_system = json.loads(decoded_json)

                  os.makedirs(output_dir, exist_ok=True)

                  for file_name, file_content in file_system.items():
                      file_path = os.path.join(output_dir, file_name)
                      with open(file_path, 'w') as file:
                          file.write(file_content)

              if __name__ == "__main__":
                 main()
              EOF

              python3 fileSystemExpansion.py source "$SOURCE"
              python3 fileSystemExpansion.py test "$TEST"



      # dotnet requires having a csproj file so that we can build and run the code.
      # We create a dummy file with Main method since otherwise, `dotnet test` will complain about not having an entry point even when the tests don't even call the Main method.
      - name: Create Source project
        shell: bash
        run: |
              mkdir -p cs

              cat << 'EOF' > cs/ConsoleApp.csproj
              <Project Sdk="Microsoft.NET.Sdk">

                <PropertyGroup>
                  <OutputType>Exe</OutputType>
                  <TargetFramework>net8.0</TargetFramework>
                  <ImplicitUsings>enable</ImplicitUsings>
                  <Nullable>enable</Nullable>
                </PropertyGroup>

              </Project>
              EOF

              cat << 'EOF' > cs/Program.cs
              class Program
              {
                  public static void Main(string[] args)
                  {
                      Console.WriteLine("This is a dummy program.");
                  }
              }
              EOF

      # Note that this test project file references the main project (ConsoleApp.csproj) from within the ItemGroup/ProjectReference XML element.
      - name: Create Test project
        shell: bash
        run: |
              mkdir -p csTest

              cat << 'EOF' > csTest/csTest.csproj
              <Project Sdk="Microsoft.NET.Sdk">

                <PropertyGroup>
                  <TargetFramework>net8.0</TargetFramework>
                  <ImplicitUsings>enable</ImplicitUsings>
                  <Nullable>enable</Nullable>

                  <IsPackable>false</IsPackable>
                  <IsTestProject>true</IsTestProject>
                </PropertyGroup>

                <ItemGroup>
                  <ProjectReference Include="..\cs\ConsoleApp.csproj" />
                </ItemGroup>

                <ItemGroup>
                  <PackageReference Include="coverlet.collector" Version="6.0.0" />
                  <PackageReference Include="Microsoft.NET.Test.Sdk" Version="17.8.0" />

                  <!-- xUnit -->
                  <PackageReference Include="xunit" Version="2.5.3" />
                  <PackageReference Include="xunit.runner.visualstudio" Version="2.5.3" />
                  
                  <!-- NUnit -->
                  <PackageReference Include="NUnit" Version="3.14.0" />
                  <PackageReference Include="NUnit.Analyzers" Version="3.9.0" />
                  <PackageReference Include="NUnit3TestAdapter" Version="4.5.0" />
                  
                  <!-- MSTest -->
                  <PackageReference Include="MSTest.TestAdapter" Version="3.1.1" />
                  <PackageReference Include="MSTest.TestFramework" Version="3.1.1" />
                </ItemGroup>

              </Project>
              EOF

      - name: Build code snippet (ces)
        shell: bash
        run: |
              # Copy the source and test files to the cs/ folder
              # Note, using `|| true` to prevent the commands from fatally failing if the source/ or test/ folders are empty or don't exist
              cp -rf source/* cs/ || true
              cp -rf test/* csTest/ || true
              echo "Contents of the cs/ folder:"
              echo "========================"
              ls cs/
              find cs/ -type f -exec echo {} \; -exec cat {} \;
              echo "========================"
              echo "Contents of the csTest/ folder"
              echo "========================"
              ls csTest/
              find csTest/ -type f -exec echo {} \; -exec cat {} \;
              echo "========================"
              cd csTest
              echo "Building project:"
              echo "========================"
              dotnet build
              echo "========================"
              echo "!!== BUILD COMPLETED ==!!"
              cd ..


      - name: Run code snippet (ces)
        shell: bash
        run: |
              export PATH="$PATH:/github/home/.dotnet/tools"
              cd csTest
              mkdir -p ../results
              echo "Running tests:"
              echo "========================"
              dotnet test --logger "trx;LogFileName=../results/test_results.trx"
              echo "========================"
              echo "!!== RUN COMPLETED ==!!"
              echo "!Finished executing code!"
              cd ..

      
      - name: Compare and Log test result
        shell: bash
        run: |
              # Write a Python script to aggregate results from the ./results folder
              cat << 'EOF' > aggregate_results.py
              import os
              import json
              import base64
              import xml.etree.ElementTree as ET
              
              def parse_trx(file_path):
                  tree = ET.parse(file_path)
                  root = tree.getroot()
                  namespace = {'ns': 'http://microsoft.com/schemas/VisualStudio/TeamTest/2010'}
                  passed = len(root.findall('.//ns:UnitTestResult[@outcome="Passed"]', namespace))
                  failed = len(root.findall('.//ns:UnitTestResult[@outcome="Failed"]', namespace))
                  errors = [e.text for e in root.findall('.//ns:ErrorMessage', namespace)]
                  return passed, failed, errors

              def main():
                  results_dir = './results'
                  total_passed = 0
                  total_failed = 0
                  errors = []

                  for file_name in os.listdir(results_dir):
                      if file_name.endswith('.json'):
                          with open(os.path.join(results_dir, file_name), 'r') as f:
                              result = json.load(f)
                              total_passed += result.get('Passed', 0)
                              total_failed += result.get('Failed', 0)
                              if result.get('Error'):
                                  errors.append(result['Error'] 
                      elif file_name.endswith('.trx'):
                          passed, failed, trx_errors = parse_trx(os.path.join(results_dir, file_name))
                          total_passed += passed
                          total_failed += failed
                          errors.extend(trx_errors)

                  print('======= RESULTS =======')
                  print("Tests Passed:", total_passed)
                  print("Tests Failed:", total_failed)
                  if errors:
                      errors_text = '\n'.join(errors) if errors else ''
                      errors_base64 = base64.b64encode(errors_text.encode('utf-8')).decode('utf-8')
                      print("Test Errors:", errors_base64)

              if __name__ == '__main__':
                  main()
              EOF

              # Run the Python script to aggregate results
              python3 aggregate_results.py
              echo "========================"
              echo "!!== RUN COMPLETED ==!!"
              echo "========================"
