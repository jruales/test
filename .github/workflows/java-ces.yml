name: Code Execution - Java Snippet

on:
   workflow_dispatch:
    inputs:
      code:
        description: 'Base64 encoded code snippet'
        required: false
        default: ''
      testInput:
        description: 'test input'
        required: false
        default: ''
      expectedOutput:
        description: 'expected output from the code for test input'
        required: false
        default: ''

jobs:
  run-CodeSnippet:
    runs-on: ubuntu-latest-xl
    container:
      #image: mcr.microsoft.com/vscode/devcontainers/universal:2-linux  # Specify your container image
      image: mcr.microsoft.com/vscode/devcontainers/java:21-bullseye  # Specify your container image
      options: --privileged  # Optional: Use if your container needs privileged mode

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Decode code snippet
        shell: bash
        run: |
         if [ -n "${{ github.event.inputs.code }}" ]; then
           echo "Start decoding code"
           echo "${{ github.event.inputs.code }}"
           echo "${{ github.event.inputs.code }}" | base64 --decode | sed 's/\r$//' > codeFile
           echo "Writing code content..."
           {
               echo 'CODE<<EOF'
               cat codeFile
               echo EOF
           } >> $GITHUB_ENV
         fi
         echo "Done writing"
             
      - name: PreProcess code file to rename class
        shell: bash
        run: |
              # Step 1: Write the content of $CODE directly to a file
                echo "$CODE" > original_code.txt

                # Step 2: Process the file with sed, changing the class name and escaping quotes
                #sed -e 's/class [A-Za-z_][A-Za-z0-9_]*/class Program/' original_code.txt > updated_code.txt
                sed -e 's/\bclass [A-Za-z_][A-Za-z0-9_]*/class Program/' -e 's/\b[A-Za-z_][A-Za-z0-9_]*\s*(/Program(/' original_code.txt > updated_code.txt

                # Step 3: Save the updated code to the environment variable CODE
                {
                  echo 'CODE<<EOF'
                  cat updated_code.txt
                  echo 'EOF'
                } >> $GITHUB_ENV

      - name: Run code snippet (ces)
        shell: bash
        run: |
              cat << 'EOF' > Program.java
              ${{ env.CODE }}
              EOF
              echo "Doing build:"
              echo "========================"
              javac Program.java
              ls
              echo  "======================="
              echo "Running code"
              echo  "======================="
              echo "${{ github.event.inputs.testInput }}" | java Program > output.txt
              echo "========================"
              echo "!Finished executing code!"


      - name: Compare and Log test result
        shell: bash
        run: |
              EXPECTED="${{ github.event.inputs.expectedOutput }}"
              ACTUAL=$(cat output.txt)

               # Visualize line endings
              echo "EXPECTED OUTPUT:"
              echo "$EXPECTED" | cat -A

              echo "ACTUAL OUTPUT:"
              echo "$ACTUAL" | cat -A 

              # Write a Python script to process the inputs
              cat << 'EOF' > logTestResult.py
              import sys

              def main():
                    expected = sys.argv[1].replace('\\n', '\n')
                    actual = sys.stdin.read()

                    expected_array = expected.strip().split('\n')
                    actual_array = actual.strip().split('\n')

                    print("Expected array length:", len(expected_array))
                    print("Actual array length:", len(actual_array))

                    pass_count = 0
                    fail_count = 0

                    for i in range(max(len(expected_array), len(actual_array))):
                        if i < len(expected_array) and i < len(actual_array):
                            if expected_array[i] == actual_array[i]:
                                pass_count += 1
                            else:
                                fail_count += 1
                                print(f"Test {i + 1} Failed")
                                print(f"Expected: '{expected_array[i]}'")
                                print(f"Actual: '{actual_array[i]}'")
                        else:
                            fail_count += 1
                            print(f"Test {i + 1} Failed (Missing in one of the arrays)")

                    print("Tests Passed:", pass_count)
                    print("Tests Failed:", fail_count)

              if __name__ == "__main__":
                 main()
              EOF

              # Run the Python script
              python3 logTestResult.py "$EXPECTED" <<< "$ACTUAL"
              echo "========================"
              echo "!!== RUN COMPLETED ==!!"
              echo "========================"