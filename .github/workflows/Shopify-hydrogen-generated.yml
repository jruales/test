name: Shopify/hydrogen
on:
  workflow_dispatch:
    inputs:
      repoName:
        description: Name of the repo
        required: false
      patch:
        description: Base64 encoded patch content
        required: false
      command:
        description: Command to run
        required: false
      ref:
        description: The repo branch, tag, or commit SHA to checkout
        required: false
jobs:
  lint:
    name: ⬣ ESLint
    runs-on: ubuntu-latest
    timeout-minutes: 15
    concurrency:
      group: ci-lint-${{ github.ref }}
      cancel-in-progress: true
    steps:
    - name: ⬇️ Checkout repo
      uses: actions/checkout@v4
      with:
        repository: ${{ github.event.inputs.repoName }}
        ref: ${{ github.event.inputs.ref }}
    - name: ⎔ Setup node
      uses: actions/setup-node@v4
      with:
        node-version-file: .nvmrc
        cache: npm
        cache-dependency-path: '**/package-lock.json'
    - name: "\U0001F4E5 Install dependencies"
      run: npm ci
    - name: "\U0001F52C Lint"
      run: npm run lint
  format:
    name: ⬣ Prettier
    runs-on: ubuntu-latest
    timeout-minutes: 15
    concurrency:
      group: ci-format-${{ github.ref }}
      cancel-in-progress: true
    steps:
    - name: ⬇️ Checkout repo
      uses: actions/checkout@v4
      with:
        repository: ${{ github.event.inputs.repoName }}
        ref: ${{ github.event.inputs.ref }}
    - name: ⎔ Setup node
      uses: actions/setup-node@v4
      with:
        node-version-file: .nvmrc
        cache: npm
        cache-dependency-path: '**/package-lock.json'
    - name: "\U0001F4E5 Install dependencies"
      run: npm ci
    - name: "\U0001F52C Check Formatting"
      run: npm run format:check
  typecheck:
    name: Typescript
    runs-on: ubuntu-latest
    timeout-minutes: 15
    concurrency:
      group: ci-typecheck-${{ github.ref }}
      cancel-in-progress: true
    steps:
    - name: ⬇️ Checkout repo
      uses: actions/checkout@v4
      with:
        repository: ${{ github.event.inputs.repoName }}
        ref: ${{ github.event.inputs.ref }}
    - name: ⎔ Setup node
      uses: actions/setup-node@v4
      with:
        node-version-file: .nvmrc
        cache: npm
        cache-dependency-path: '**/package-lock.json'
    - name: "\U0001F4E5 Install dependencies"
      run: npm ci
    - name: "\U0001F4E6 Build packages, templates, and examples"
      run: SHOPIFY_HYDROGEN_FLAG_LOCKFILE_CHECK=false npm run build:all
    - name: ✅ Typecheck
      run: npm run typecheck
    - name: "\U0001F9D1‍\U0001F4BB CLI manifest check"
      run: test -z "$(git status --porcelain "packages/cli/oclif.manifest.json" )" || { echo -e "Run npm generate:manifest in packages/cli before pushing new commands or flags. Diff here:\n\n$(git diff)" ; exit 1; }
  test:
    name: ⬣ Unit tests
    runs-on: ubuntu-latest
    timeout-minutes: 15
    concurrency:
      group: ci-test-${{ github.ref }}
      cancel-in-progress: true
    steps:
    - name: ⬇️ Checkout repo
      uses: actions/checkout@v4
      with:
        repository: ${{ github.event.inputs.repoName }}
        ref: ${{ github.event.inputs.ref }}
    - name: ⎔ Setup node
      uses: actions/setup-node@v4
      with:
        node-version-file: .nvmrc
        cache: npm
        cache-dependency-path: '**/package-lock.json'
    - name: "\U0001F4E5 Install dependencies"
      run: npm ci
    - name: "\U0001F4E6 Build packages, templates, and examples"
      run: SHOPIFY_HYDROGEN_FLAG_LOCKFILE_CHECK=false npm run build:all
    - name: Apply patch
      shell: bash
      run: |

                if [ -n "${{ github.event.inputs.patch }}" ]; then
                   echo "Patch input provided. Applying patch..."
                   echo "${{ github.event.inputs.patch }}" | base64 --decode | sed 's/\r$//'  > patch.diff
                   echo "Decoded patch content:"
                   cat patch.diff 
                   echo "Apply the patch:"
                   git apply patch.diff || {
                     echo "Failed to apply patch"
                     exit 1
                   }
                 else
                   echo "No patch input provided. Skipping patch application."
                 fi
                echo "Print git diff on local repo"
                git diff
    - name: Run custom command
      shell: bash
      run: |
         
                if [ -n "${{ github.event.inputs.command }}" ]; then
                   echo "Start running custom command"
                   echo "${{ github.event.inputs.command }}"
                   output=$(echo "${{ github.event.inputs.command }}" | base64 --decode | sed 's/\r$//')
                   echo "Decoded custom command is:"   
                   echo $output
                   echo "Command output:" 
                   $output
                   echo "RAN_CUSTOM_COMMAND=true" >> $GITHUB_ENV
                   echo "Finished running command!"
                fi
    - name: Exit if custom command was run
      if: env.RAN_CUSTOM_COMMAND == 'true'
      shell: bash
      run: |

                echo "Exiting job after custom command run"
                exit 1
    - name: "\U0001F52C Test (ces) (ces)"
      run: npm run test
