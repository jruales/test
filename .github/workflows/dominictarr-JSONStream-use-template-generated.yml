name: dominictarr/JSONStream
on:
  workflow_dispatch:
    inputs:
      repoName:
        description: Name of the repo
        required: false
      patch:
        description: Base64 encoded patch content
        required: false
      command:
        description: Command to run
        required: false
      ref:
        description: The repo branch, tag, or commit SHA to checkout
        required: false
jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        os:
        - ubuntu-latest
        - windows-latest
        node-version:
        - 22
        - 20
        - 18
        - 16
        - 14
    steps:
    - uses: actions/checkout@v4
      with:
        repository: ${{ github.event.inputs.repoName }}
        ref: ${{ github.event.inputs.ref }}
    - name: Set up Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        check-latest: true
    - name: Search for package.json
      id: search-package-json
      run: |
        # Search for package.json file in the repository

        PACKAGE_JSON_PATH=$(find . -name 'package.json' | head -n 1)

        if [ -z "$PACKAGE_JSON_PATH" ]; then
          echo "No package.json found"
          exit 1
        fi

        echo "package_json_path=$(dirname "$PACKAGE_JSON_PATH")" >> $GITHUB_ENV
      shell: bash
    - name: Check for package-lock.json
      run: |
        if [ ! -f package-lock.json ]; then
          echo "package-lock.json not found, generating..."
          npm install --package-lock-only
        else
          echo "package-lock.json found, checking if in sync with package.json..."
          npm ls > /dev/null || { echo "package.json and package-lock.json are not in sync. Please run 'npm install' locally and commit the changes."; exit 1; }
        fi
      working-directory: ${{ env.package_json_path }}
    - name: Install dependencies with npm or pnpm
      run: |
        if [ -f package-lock.json ]; then
          npm ci
        elif [ -f pnpm-lock.yaml ]; then
          npm install -g pnpm
          pnpm install --frozen-lockfile
        else
          echo "No lock file found, job should be failed, but for project build and run test, add package-lock.json file."
          npm install --package-lock-only
          echo "Proceeding with dependency installation..."
          npm ci
        fi
      working-directory: ${{ env.package_json_path }}
    - name: Build
      run: |
        if [ -f package-lock.json ]; then
          npm run build --if-present
        elif [ -f pnpm-lock.yaml ]; then
          pnpm run build --if-present
        else
          echo "Lock file not found. Cannot run build scripts."
          exit 1
        fi
      working-directory: ${{ env.package_json_path }}
    - name: Apply patch
      shell: bash
      run: |

                if [ -n "${{ github.event.inputs.patch }}" ]; then
                   echo "Patch input provided. Applying patch..."
                   echo "${{ github.event.inputs.patch }}" | base64 --decode | sed 's/\r$//'  > patch.diff
                   echo "Decoded patch content:"
                   cat patch.diff 
                   echo "Apply the patch:"
                   git apply patch.diff || {
                     echo "Failed to apply patch"
                     exit 1
                   }
                 else
                   echo "No patch input provided. Skipping patch application."
                 fi
                echo "Print git diff on local repo"
                git diff
    - name: Run custom command
      shell: bash
      run: |
         
                if [ -n "${{ github.event.inputs.command }}" ]; then
                   echo "Start running custom command"
                   echo "${{ github.event.inputs.command }}"
                   output=$(echo "${{ github.event.inputs.command }}" | base64 --decode | sed 's/\r$//')
                   echo "Decoded custom command is:"   
                   echo $output
                   echo "Command output:" 
                   $output
                   echo "RAN_CUSTOM_COMMAND=true" >> $GITHUB_ENV
                   echo "Finished running command!"
                fi
    - name: Exit if custom command was run
      if: env.RAN_CUSTOM_COMMAND == 'true'
      shell: bash
      run: |

                echo "Exiting job after custom command run"
                exit 1
    - name: Test (ces) (ces)
      run: |
        if [ -f "package.json" ] && [ "$(node -e "const pkg = require('./package.json'); console.log(pkg.scripts && pkg.scripts.test ? true : false);")" = "true" ]; then
          echo "Test script found in package.json."
          cat "package.json"
          if [ -f "package-lock.json" ]; then
            npm test
          elif [ -f "pnpm-lock.yaml" ]; then
            pnpm test
          else
            echo "Lock file not found. Cannot run test scripts."
            exit 1
          fi
        else
          echo "No test script found in package.json."
          exit 0
        fi
      shell: bash
      working-directory: ${{ env.package_json_path }}
