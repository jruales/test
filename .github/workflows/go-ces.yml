name: Run Dev Container - Code Execution - go

on:
  workflow_dispatch:
    inputs:
      code:
        description: 'Base64 encoded code snippet'
        required: false
        default: ''
      testInput:
        description: 'test input'
        required: false
        default: ''
      expectedOutput:
        description: 'expected output from the code for test input'
        required: false
        default: ''
        
jobs:
  run-devcontainer:
    runs-on: ubuntu-latest
    container:
      image: mcr.microsoft.com/vscode/devcontainers/go
      options: --privileged
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Decode code snippet
        shell: bash
        run: |
         if [ -n "${{ github.event.inputs.code }}" ]; then
           echo "Start decoding code"
           echo "${{ github.event.inputs.code }}"
           echo "${{ github.event.inputs.code }}" | base64 --decode | sed 's/\r$//' > codeFile
           echo "Writing code content:"
           {
               echo 'CODE<<EOF'
               cat codeFile
               echo EOF
           } >> $GITHUB_ENV
         fi

      - name: Print env values for debugging
        shell: bash
        run: |
             echo "=====Custom command:"
             echo "${{ env.CODE }}"
      
      - name: Run code snippet (ces)
        shell: bash
        run: |
          cat << 'EOF' > code.go
          ${{ env.CODE }}
          EOF

          echo "Running custom command:"
          echo "========================"

          containsMainPackage=$(grep -c "package main" code.go || true)
          containsMainFunction=$(grep -c "func main()" code.go || true)

          echo "main package $containsMainPackage"
          echo "main function $containsMainFunction"

          if [ "$containsMainPackage" -gt 0 ] && [ "$containsMainFunction" -gt 0 ]; then
            echo "Running main package:"
            echo "========================"
            echo "${{ github.event.inputs.testInput }}" | go run code.go > output.txt
          else
            echo "Running tests:"
            echo "========================"
            mv code.go code_test.go
            echo "${{ github.event.inputs.testInput }}" | go test code_test.go > output.txt
          fi

          echo "========================"
          echo "!Finished executing code!"
          echo "End devContainer run"
      
        

      - name: Compare and Log test result
        shell: bash
        run: |
              EXPECTED="${{ github.event.inputs.expectedOutput }}"
              ACTUAL=$(cat output.txt)

               # Visualize line endings
              echo "EXPECTED OUTPUT:"
              echo "$EXPECTED" | cat -A

              echo "ACTUAL OUTPUT:"
              echo "$ACTUAL" | cat -A 

              # Write a Python script to process the inputs
              cat << 'EOF' > logTestResult.py
              import sys

              def main():
                    expected = sys.argv[1].replace('\\n', '\n')
                    actual = sys.stdin.read()

                    expected_array = expected.strip().split('\n')
                    actual_array = actual.strip().split('\n')

                    print("Expected array length:", len(expected_array))
                    print("Actual array length:", len(actual_array))

                    pass_count = 0
                    fail_count = 0

                    for i in range(max(len(expected_array), len(actual_array))):
                        if i < len(expected_array) and i < len(actual_array):
                            if expected_array[i] == actual_array[i]:
                                pass_count += 1
                            else:
                                fail_count += 1
                                print(f"Test {i + 1} Failed")
                                print(f"Expected: '{expected_array[i]}'")
                                print(f"Actual: '{actual_array[i]}'")
                        else:
                            fail_count += 1
                            print(f"Test {i + 1} Failed (Missing in one of the arrays)")

                    print("Tests Passed:", pass_count)
                    print("Tests Failed:", fail_count)

              if __name__ == "__main__":
                 main()
              EOF

              # Run the Python script
              python3 logTestResult.py "$EXPECTED" <<< "$ACTUAL"
              echo "========================"
              echo "!!== RUN COMPLETED ==!!"
              echo "========================"
