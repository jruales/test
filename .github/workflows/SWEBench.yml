name: swebench-eval

on:
   workflow_dispatch:
    inputs:
      run_id:
        required: true
        default: 'validate-gold'
      predictions_path:
        required: true
        default: 'gold'
      imageIds:
        required: true
        default: 'sympy__sympy-20590'
      max_workers:
        required: true
        default: 1  
      repoName:
        description: Name of the repo
        required: false
      patch:
        description: 'Base64 encoded patch content'
        required: false
        default: ''
      command:
        description: 'Base64 encoded command content'
        required: false
        default: ''
      ref:
        description: 'The branch, tag, or commit SHA to checkout'
        required: false
        #default: '9802a2c638ac5cb2be7120651835ffb4f82a8d60' # snapshot from 7/27/24
        default: '7336033d65d32ec62f9ce2419aa8f3a757b06ce2' # snapshot from 8/20/24
        

permissions:
      id-token: write
      contents: read      
env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  run_swebench:    
    env:
      REPO_NAME: princeton-nlp/SWE-bench
      REPO_PATH: SWE-bench-repo
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        python-version: ["3.12"]
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        working-directory: ${{ env.REPO_PATH }}    
    steps:  
    - name: Checkout repository ${{ env.REPO_NAME }}
      uses: actions/checkout@v4
      with:
        repository: ${{ env.REPO_NAME }}
        path: ${{ env.REPO_PATH }}
        ref: ${{ github.event.inputs.ref }}
    - name: Setup Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
    - name: Install SWE-bench
      run: |
        pip install --upgrade pip wheel
        pip install -e .
    - name: 'Az CLI login'
      if: ${{ github.event.inputs.command != '' }}
      uses: azure/login@v2
      with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}  
    - name: Login to ACR
      if: ${{ github.event.inputs.command != '' }}
      run: az acr login --name codeexecservice
    - name: Run SWEBench docker
      if: ${{ github.event.inputs.command != '' }}
      shell: bash
      run: |
            imageId="${{ github.event.inputs.imageIds }}"
            echo "imageid=${imageId}" 
            imageName="sweb.eval.x86_64.${imageId}"
            echo "imageName=${imageName}"
            docker run --name $imageId -d codeexecservice.azurecr.io/${imageName}:latest tail -f /dev/null
            docker ps

    - name: Log local state
      shell: bash
      run: |
          echo "Local docker containers running:"
          docker ps
          echo "Local repo HEAD is at:"
          git log -1
    - name: Apply patch to SWE Bench Container
      if: ${{ github.event.inputs.command != '' }}
      shell: bash
      run: |
          if [ -n "${{ github.event.inputs.patch }}" ]; then
            echo "Patch input provided. Applying patch..."
            echo "${{ github.event.inputs.patch }}" | base64 --decode | sed 's/\r$//'  > patch.diff    
            echo "Decoded patch content:"
            cat patch.diff
            echo "copying patch file..."
            imageId="${{ github.event.inputs.imageIds }}"
            containerName="${imageId}"
            echo "containerName=${containerName}"
            working_dir=$(docker exec $containerName pwd)
            echo "Container workingDir: $working_dir"
            docker cp patch.diff $containerName:${working_dir}/
            echo "Apply the patch:"
            PATCH_OUTPUT=$(docker exec $containerName bash -c "git apply --verbose patch.diff")
            echo "patch Output: $PATCH_OUTPUT"            
          else
            echo "No patch input provided. Skipping patch application."
          fi         
          
    - name: Apply patch locally      
      shell: bash
      run: |
          if [ -n "${{ github.event.inputs.patch }}" ]; then
            echo "PWD="
            pwd
            echo " "
            echo "ls="
            ls
            echo " "
            echo "Patch input provided. Applying patch..."
            echo ""${{ github.event.inputs.patch }}"" | base64 --decode | sed 's/\r$//'  > patch.diff
            echo ""Decoded patch content:""
            cat patch.diff 
            echo "" ""
            echo ""Applying the patch...""
            git apply --verbose patch.diff
            echo ""Done""
          else
            echo "No patch input provided. Skipping patch application."
          fi         
    - name: Run custom command on SWE Bench Container (ces)
      shell: bash
      run: |       
         if [ -n "${{ github.event.inputs.command }}" ]; then
           echo "Start running custom command"         
           echo "${{ github.event.inputs.command }}"
           cmd=$(echo "${{ github.event.inputs.command }}" | base64 --decode | sed 's/\r$//')
           echo "Decoded custom command is:"   
           echo $cmd
           imageId="${{ github.event.inputs.imageIds }}"
           containerName="${imageId}"
           echo "!!=====================================!!"   
           echo "Custom command output:"   
           echo "!!=====================================!!"   
           CMD_OUTPUT=$(docker exec $containerName bash -c "source /opt/miniconda3/bin/activate && conda activate testbed && eval $cmd")
           echo $CMD_OUTPUT
           echo "!!=====================================!!"   
           echo "RAN_CUSTOM_COMMAND=true" >> $GITHUB_ENV
           echo "Finished running custom command!"
           echo "!!== RUN COMPLETED ==!!"
         fi    
    - name: Run swebench harness evaluation (ces)
      if: env.RAN_CUSTOM_COMMAND != 'true'      
      run: |
        python -m swebench.harness.run_evaluation \
          --predictions_path ${{ github.event.inputs.predictions_path }} \
          --max_workers ${{ github.event.inputs.max_workers }} \
          --instance_ids ${{ github.event.inputs.imageIds }} \
          --run_id ${{ github.event.inputs.run_id }} \
          --dataset_name "princeton-nlp/SWE-bench_Verified"
    - name: Get SWEBench eval test result (ces)
      if: env.RAN_CUSTOM_COMMAND != 'true'
      run: |        
        ls -R ./logs/run_evaluation/${{ github.event.inputs.run_id }}/${{ github.event.inputs.predictions_path }}
        logsDir="./logs/run_evaluation/${{ github.event.inputs.run_id }}/${{ github.event.inputs.predictions_path }}/${{ github.event.inputs.imageIds }}"
        echo "Contents of test log:"
        echo "========================="
        cat "$logsDir/test_output.txt"
        echo "========================="
        echo "!!== RUN COMPLETED ==!!"
