name: openjdk/jdk21
on:
  workflow_dispatch:
    inputs:
      repoName:
        description: Name of the repo
        required: false
      patch:
        description: Base64 encoded patch content
        required: false
      command:
        description: Command to run
        required: false
      ref:
        description: The repo branch, tag, or commit SHA to checkout
        required: false
jobs:
  build-linux:
    name: build
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        debug-level: ${{ fromJSON(inputs.debug-levels) }}
        include:
        - debug-level: debug
          flags: --with-debug-level=fastdebug
          suffix: -debug
    steps:
    - name: Checkout the JDK source
      uses: actions/checkout@v3
      with:
        repository: ${{ github.event.inputs.repoName }}
        ref: ${{ github.event.inputs.ref }}
    - name: Get the BootJDK
      id: bootjdk
      uses: ./.github/actions/get-bootjdk
      with:
        platform: linux-x64
    - name: Get JTReg
      id: jtreg
      uses: ./.github/actions/get-jtreg
    - name: Apply patch
      shell: bash
      run: |

                if [ -n "${{ github.event.inputs.patch }}" ]; then
                   echo "Patch input provided. Applying patch..."
                   echo "${{ github.event.inputs.patch }}" | base64 --decode | sed 's/\r$//'  > patch.diff
                   echo "Decoded patch content:"
                   cat patch.diff 
                   echo "Apply the patch:"
                   git apply patch.diff || {
                     echo "Failed to apply patch"
                     exit 1
                   }
                 else
                   echo "No patch input provided. Skipping patch application."
                 fi
                echo "Print git diff on local repo"
                git diff
    - name: Run custom command
      shell: bash
      run: |
         
                if [ -n "${{ github.event.inputs.command }}" ]; then
                   echo "Start running custom command"
                   echo "${{ github.event.inputs.command }}"
                   output=$(echo "${{ github.event.inputs.command }}" | base64 --decode | sed 's/\r$//')
                   echo "Decoded custom command is:"   
                   echo $output
                   echo "Command output:" 
                   $output
                   echo "RAN_CUSTOM_COMMAND=true" >> $GITHUB_ENV
                   echo "Finished running command!"
                fi
    - name: Exit if custom command was run
      if: env.RAN_CUSTOM_COMMAND == 'true'
      shell: bash
      run: |

                echo "Exiting job after custom command run"
                exit 1
    - name: Get GTest (ces) (ces)
      id: gtest
      uses: ./.github/actions/get-gtest
    - name: Set architecture
      id: arch
      run: |
        # Set a proper suffix for packages if using a different architecture

        if [[ '${{ inputs.apt-architecture }}' != '' ]]; then
          echo 'suffix=:${{ inputs.apt-architecture }}' >> $GITHUB_OUTPUT
        fi
    - name: Install toolchain and dependencies
      run: |
        # Install dependencies using apt-get

        if [[ '${{ inputs.apt-architecture }}' != '' ]]; then
          sudo dpkg --add-architecture ${{ inputs.apt-architecture }}
        fi

        sudo apt-get update

        sudo apt-get install --only-upgrade apt

        sudo apt-get install gcc-${{ inputs.gcc-major-version }}${{ inputs.gcc-package-suffix }}=${{ inputs.apt-gcc-version }} g++-${{ inputs.gcc-major-version }}${{ inputs.gcc-package-suffix }}=${{ inputs.apt-gcc-version }} libxrandr-dev${{ steps.arch.outputs.suffix }} libxtst-dev${{ steps.arch.outputs.suffix }} libcups2-dev${{ steps.arch.outputs.suffix }} libasound2-dev${{ steps.arch.outputs.suffix }} ${{ inputs.apt-extra-packages }}

        sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-${{ inputs.gcc-major-version }} 100 --slave /usr/bin/g++ g++ /usr/bin/g++-${{ inputs.gcc-major-version }}
    - name: Configure
      run: |
        bash configure --with-conf-name=${{ inputs.platform }} ${{ matrix.flags }} --with-version-opt=${GITHUB_ACTOR}-${GITHUB_SHA} --with-boot-jdk=${{ steps.bootjdk.outputs.path }} --with-jtreg=${{ steps.jtreg.outputs.path }} --with-gtest=${{ steps.gtest.outputs.path }} --with-zlib=system --with-jmod-compress=zip-1 ${{ inputs.extra-conf-options }} ${{ inputs.configure-arguments }} || ( echo "Dumping config.log:" && cat config.log && exit 1)
    - name: Build
      id: build
      uses: ./.github/actions/do-build
      with:
        make-target: ${{ inputs.make-target }} ${{ inputs.make-arguments }}
        platform: ${{ inputs.platform }}
        debug-suffix: ${{ matrix.suffix }}
    - name: Upload bundles
      uses: ./.github/actions/upload-bundles
      with:
        platform: ${{ inputs.platform }}
        debug-suffix: ${{ matrix.suffix }}
